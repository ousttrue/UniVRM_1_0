// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: VRMC_materials_mtoon.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VrmProtobuf {

  /// <summary>Holder for reflection information generated from VRMC_materials_mtoon.proto</summary>
  public static partial class VRMCMaterialsMtoonReflection {

    #region Descriptor
    /// <summary>File descriptor for VRMC_materials_mtoon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VRMCMaterialsMtoonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpWUk1DX21hdGVyaWFsc19tdG9vbi5wcm90bxILVnJtUHJvdG9idWYaHmdv",
            "b2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byLHDAoUVlJNQ19tYXRlcmlh",
            "bHNfbXRvb24SDwoHdmVyc2lvbhgBIAEoCRI5ChV0cmFuc3BhcmVudFdpdGha",
            "V3JpdGUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjwKF3Jl",
            "bmRlclF1ZXVlT2Zmc2V0TnVtYmVyGAMgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDMyVmFsdWUSEwoLc2hhZGVGYWN0b3IYBCADKAISOQoUc2hhZGVNdWx0",
            "aXBseVRleHR1cmUYBSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1",
            "ZRI3ChJzaGFkaW5nU2hpZnRGYWN0b3IYBiABKAsyGy5nb29nbGUucHJvdG9i",
            "dWYuRmxvYXRWYWx1ZRI3ChJzaGFkaW5nVG9vbnlGYWN0b3IYByABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZRJAChtsaWdodENvbG9yQXR0ZW51",
            "YXRpb25GYWN0b3IYCCABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1",
            "ZRI2ChFnaUludGVuc2l0eUZhY3RvchgJIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5GbG9hdFZhbHVlEjQKD2FkZGl0aXZlVGV4dHVyZRgKIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQzMlZhbHVlEhEKCXJpbUZhY3RvchgLIAMoAhI3ChJy",
            "aW1NdWx0aXBseVRleHR1cmUYDCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "MzJWYWx1ZRI5ChRyaW1MaWdodGluZ01peEZhY3RvchgNIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5GbG9hdFZhbHVlEjoKFXJpbUZyZXNuZWxQb3dlckZhY3Rv",
            "chgOIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEjIKDXJpbUxp",
            "ZnRGYWN0b3IYDyABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZRJM",
            "ChBvdXRsaW5lV2lkdGhNb2RlGBAgASgOMjIuVnJtUHJvdG9idWYuVlJNQ19t",
            "YXRlcmlhbHNfbXRvb24uT3V0bGluZVdpZHRoTW9kZRI3ChJvdXRsaW5lV2lk",
            "dGhGYWN0b3IYESABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZRJA",
            "ChtvdXRsaW5lV2lkdGhNdWx0aXBseVRleHR1cmUYEiABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50MzJWYWx1ZRJDCh5vdXRsaW5lU2NhbGVkTWF4RGlzdGFu",
            "Y2VGYWN0b3IYEyABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZRJM",
            "ChBvdXRsaW5lQ29sb3JNb2RlGBQgASgOMjIuVnJtUHJvdG9idWYuVlJNQ19t",
            "YXRlcmlhbHNfbXRvb24uT3V0bGluZUNvbG9yTW9kZRIVCg1vdXRsaW5lRmFj",
            "dG9yGBUgAygCEj0KGG91dGxpbmVMaWdodGluZ01peEZhY3RvchgWIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEjsKFnV2QW5pbWF0aW9uTWFz",
            "a1RleHR1cmUYFyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRJC",
            "Ch11dkFuaW1hdGlvblNjcm9sbFhTcGVlZEZhY3RvchgYIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5GbG9hdFZhbHVlEkIKHXV2QW5pbWF0aW9uU2Nyb2xsWVNw",
            "ZWVkRmFjdG9yGBkgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUS",
            "QwoedXZBbmltYXRpb25Sb3RhdGlvblNwZWVkRmFjdG9yGBogASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkZsb2F0VmFsdWUiSQoQT3V0bGluZVdpZHRoTW9kZRII",
            "CgRub25lEAASFAoQd29ybGRDb29yZGluYXRlcxABEhUKEXNjcmVlbkNvb3Jk",
            "aW5hdGVzEAIiNQoQT3V0bGluZUNvbG9yTW9kZRIOCgpmaXhlZENvbG9yEAAS",
            "EQoNbWl4ZWRMaWdodGluZxABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.VRMC_materials_mtoon), global::VrmProtobuf.VRMC_materials_mtoon.Parser, new[]{ "Version", "TransparentWithZWrite", "RenderQueueOffsetNumber", "ShadeFactor", "ShadeMultiplyTexture", "ShadingShiftFactor", "ShadingToonyFactor", "LightColorAttenuationFactor", "GiIntensityFactor", "AdditiveTexture", "RimFactor", "RimMultiplyTexture", "RimLightingMixFactor", "RimFresnelPowerFactor", "RimLiftFactor", "OutlineWidthMode", "OutlineWidthFactor", "OutlineWidthMultiplyTexture", "OutlineScaledMaxDistanceFactor", "OutlineColorMode", "OutlineFactor", "OutlineLightingMixFactor", "UvAnimationMaskTexture", "UvAnimationScrollXSpeedFactor", "UvAnimationScrollYSpeedFactor", "UvAnimationRotationSpeedFactor" }, null, new[]{ typeof(global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode), typeof(global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VRMC_materials_mtoon : pb::IMessage<VRMC_materials_mtoon> {
    private static readonly pb::MessageParser<VRMC_materials_mtoon> _parser = new pb::MessageParser<VRMC_materials_mtoon>(() => new VRMC_materials_mtoon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VRMC_materials_mtoon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.VRMCMaterialsMtoonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRMC_materials_mtoon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRMC_materials_mtoon(VRMC_materials_mtoon other) : this() {
      version_ = other.version_;
      TransparentWithZWrite = other.TransparentWithZWrite;
      RenderQueueOffsetNumber = other.RenderQueueOffsetNumber;
      shadeFactor_ = other.shadeFactor_.Clone();
      ShadeMultiplyTexture = other.ShadeMultiplyTexture;
      ShadingShiftFactor = other.ShadingShiftFactor;
      ShadingToonyFactor = other.ShadingToonyFactor;
      LightColorAttenuationFactor = other.LightColorAttenuationFactor;
      GiIntensityFactor = other.GiIntensityFactor;
      AdditiveTexture = other.AdditiveTexture;
      rimFactor_ = other.rimFactor_.Clone();
      RimMultiplyTexture = other.RimMultiplyTexture;
      RimLightingMixFactor = other.RimLightingMixFactor;
      RimFresnelPowerFactor = other.RimFresnelPowerFactor;
      RimLiftFactor = other.RimLiftFactor;
      outlineWidthMode_ = other.outlineWidthMode_;
      OutlineWidthFactor = other.OutlineWidthFactor;
      OutlineWidthMultiplyTexture = other.OutlineWidthMultiplyTexture;
      OutlineScaledMaxDistanceFactor = other.OutlineScaledMaxDistanceFactor;
      outlineColorMode_ = other.outlineColorMode_;
      outlineFactor_ = other.outlineFactor_.Clone();
      OutlineLightingMixFactor = other.OutlineLightingMixFactor;
      UvAnimationMaskTexture = other.UvAnimationMaskTexture;
      UvAnimationScrollXSpeedFactor = other.UvAnimationScrollXSpeedFactor;
      UvAnimationScrollYSpeedFactor = other.UvAnimationScrollYSpeedFactor;
      UvAnimationRotationSpeedFactor = other.UvAnimationRotationSpeedFactor;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRMC_materials_mtoon Clone() {
      return new VRMC_materials_mtoon(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    /// Meta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transparentWithZWrite" field.</summary>
    public const int TransparentWithZWriteFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_transparentWithZWrite_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? transparentWithZWrite_;
    /// <summary>
    /// enable depth buffer when renderMode is transparent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? TransparentWithZWrite {
      get { return transparentWithZWrite_; }
      set {
        transparentWithZWrite_ = value;
      }
    }


    /// <summary>Field number for the "renderQueueOffsetNumber" field.</summary>
    public const int RenderQueueOffsetNumberFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_renderQueueOffsetNumber_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? renderQueueOffsetNumber_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? RenderQueueOffsetNumber {
      get { return renderQueueOffsetNumber_; }
      set {
        renderQueueOffsetNumber_ = value;
      }
    }


    /// <summary>Field number for the "shadeFactor" field.</summary>
    public const int ShadeFactorFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_shadeFactor_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> shadeFactor_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ShadeFactor {
      get { return shadeFactor_; }
    }

    /// <summary>Field number for the "shadeMultiplyTexture" field.</summary>
    public const int ShadeMultiplyTextureFieldNumber = 5;
    private static readonly pb::FieldCodec<int?> _single_shadeMultiplyTexture_codec = pb::FieldCodec.ForStructWrapper<int>(42);
    private int? shadeMultiplyTexture_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? ShadeMultiplyTexture {
      get { return shadeMultiplyTexture_; }
      set {
        shadeMultiplyTexture_ = value;
      }
    }


    /// <summary>Field number for the "shadingShiftFactor" field.</summary>
    public const int ShadingShiftFactorFieldNumber = 6;
    private static readonly pb::FieldCodec<float?> _single_shadingShiftFactor_codec = pb::FieldCodec.ForStructWrapper<float>(50);
    private float? shadingShiftFactor_;
    /// <summary>
    /// Lighting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? ShadingShiftFactor {
      get { return shadingShiftFactor_; }
      set {
        shadingShiftFactor_ = value;
      }
    }


    /// <summary>Field number for the "shadingToonyFactor" field.</summary>
    public const int ShadingToonyFactorFieldNumber = 7;
    private static readonly pb::FieldCodec<float?> _single_shadingToonyFactor_codec = pb::FieldCodec.ForStructWrapper<float>(58);
    private float? shadingToonyFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? ShadingToonyFactor {
      get { return shadingToonyFactor_; }
      set {
        shadingToonyFactor_ = value;
      }
    }


    /// <summary>Field number for the "lightColorAttenuationFactor" field.</summary>
    public const int LightColorAttenuationFactorFieldNumber = 8;
    private static readonly pb::FieldCodec<float?> _single_lightColorAttenuationFactor_codec = pb::FieldCodec.ForStructWrapper<float>(66);
    private float? lightColorAttenuationFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? LightColorAttenuationFactor {
      get { return lightColorAttenuationFactor_; }
      set {
        lightColorAttenuationFactor_ = value;
      }
    }


    /// <summary>Field number for the "giIntensityFactor" field.</summary>
    public const int GiIntensityFactorFieldNumber = 9;
    private static readonly pb::FieldCodec<float?> _single_giIntensityFactor_codec = pb::FieldCodec.ForStructWrapper<float>(74);
    private float? giIntensityFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? GiIntensityFactor {
      get { return giIntensityFactor_; }
      set {
        giIntensityFactor_ = value;
      }
    }


    /// <summary>Field number for the "additiveTexture" field.</summary>
    public const int AdditiveTextureFieldNumber = 10;
    private static readonly pb::FieldCodec<int?> _single_additiveTexture_codec = pb::FieldCodec.ForStructWrapper<int>(82);
    private int? additiveTexture_;
    /// <summary>
    /// MatCap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? AdditiveTexture {
      get { return additiveTexture_; }
      set {
        additiveTexture_ = value;
      }
    }


    /// <summary>Field number for the "rimFactor" field.</summary>
    public const int RimFactorFieldNumber = 11;
    private static readonly pb::FieldCodec<float> _repeated_rimFactor_codec
        = pb::FieldCodec.ForFloat(90);
    private readonly pbc::RepeatedField<float> rimFactor_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Rim
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RimFactor {
      get { return rimFactor_; }
    }

    /// <summary>Field number for the "rimMultiplyTexture" field.</summary>
    public const int RimMultiplyTextureFieldNumber = 12;
    private static readonly pb::FieldCodec<int?> _single_rimMultiplyTexture_codec = pb::FieldCodec.ForStructWrapper<int>(98);
    private int? rimMultiplyTexture_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? RimMultiplyTexture {
      get { return rimMultiplyTexture_; }
      set {
        rimMultiplyTexture_ = value;
      }
    }


    /// <summary>Field number for the "rimLightingMixFactor" field.</summary>
    public const int RimLightingMixFactorFieldNumber = 13;
    private static readonly pb::FieldCodec<float?> _single_rimLightingMixFactor_codec = pb::FieldCodec.ForStructWrapper<float>(106);
    private float? rimLightingMixFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? RimLightingMixFactor {
      get { return rimLightingMixFactor_; }
      set {
        rimLightingMixFactor_ = value;
      }
    }


    /// <summary>Field number for the "rimFresnelPowerFactor" field.</summary>
    public const int RimFresnelPowerFactorFieldNumber = 14;
    private static readonly pb::FieldCodec<float?> _single_rimFresnelPowerFactor_codec = pb::FieldCodec.ForStructWrapper<float>(114);
    private float? rimFresnelPowerFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? RimFresnelPowerFactor {
      get { return rimFresnelPowerFactor_; }
      set {
        rimFresnelPowerFactor_ = value;
      }
    }


    /// <summary>Field number for the "rimLiftFactor" field.</summary>
    public const int RimLiftFactorFieldNumber = 15;
    private static readonly pb::FieldCodec<float?> _single_rimLiftFactor_codec = pb::FieldCodec.ForStructWrapper<float>(122);
    private float? rimLiftFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? RimLiftFactor {
      get { return rimLiftFactor_; }
      set {
        rimLiftFactor_ = value;
      }
    }


    /// <summary>Field number for the "outlineWidthMode" field.</summary>
    public const int OutlineWidthModeFieldNumber = 16;
    private global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode outlineWidthMode_ = global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode.None;
    /// <summary>
    /// Outline
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode OutlineWidthMode {
      get { return outlineWidthMode_; }
      set {
        outlineWidthMode_ = value;
      }
    }

    /// <summary>Field number for the "outlineWidthFactor" field.</summary>
    public const int OutlineWidthFactorFieldNumber = 17;
    private static readonly pb::FieldCodec<float?> _single_outlineWidthFactor_codec = pb::FieldCodec.ForStructWrapper<float>(138);
    private float? outlineWidthFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? OutlineWidthFactor {
      get { return outlineWidthFactor_; }
      set {
        outlineWidthFactor_ = value;
      }
    }


    /// <summary>Field number for the "outlineWidthMultiplyTexture" field.</summary>
    public const int OutlineWidthMultiplyTextureFieldNumber = 18;
    private static readonly pb::FieldCodec<int?> _single_outlineWidthMultiplyTexture_codec = pb::FieldCodec.ForStructWrapper<int>(146);
    private int? outlineWidthMultiplyTexture_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? OutlineWidthMultiplyTexture {
      get { return outlineWidthMultiplyTexture_; }
      set {
        outlineWidthMultiplyTexture_ = value;
      }
    }


    /// <summary>Field number for the "outlineScaledMaxDistanceFactor" field.</summary>
    public const int OutlineScaledMaxDistanceFactorFieldNumber = 19;
    private static readonly pb::FieldCodec<float?> _single_outlineScaledMaxDistanceFactor_codec = pb::FieldCodec.ForStructWrapper<float>(154);
    private float? outlineScaledMaxDistanceFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? OutlineScaledMaxDistanceFactor {
      get { return outlineScaledMaxDistanceFactor_; }
      set {
        outlineScaledMaxDistanceFactor_ = value;
      }
    }


    /// <summary>Field number for the "outlineColorMode" field.</summary>
    public const int OutlineColorModeFieldNumber = 20;
    private global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode outlineColorMode_ = global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode.FixedColor;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode OutlineColorMode {
      get { return outlineColorMode_; }
      set {
        outlineColorMode_ = value;
      }
    }

    /// <summary>Field number for the "outlineFactor" field.</summary>
    public const int OutlineFactorFieldNumber = 21;
    private static readonly pb::FieldCodec<float> _repeated_outlineFactor_codec
        = pb::FieldCodec.ForFloat(170);
    private readonly pbc::RepeatedField<float> outlineFactor_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> OutlineFactor {
      get { return outlineFactor_; }
    }

    /// <summary>Field number for the "outlineLightingMixFactor" field.</summary>
    public const int OutlineLightingMixFactorFieldNumber = 22;
    private static readonly pb::FieldCodec<float?> _single_outlineLightingMixFactor_codec = pb::FieldCodec.ForStructWrapper<float>(178);
    private float? outlineLightingMixFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? OutlineLightingMixFactor {
      get { return outlineLightingMixFactor_; }
      set {
        outlineLightingMixFactor_ = value;
      }
    }


    /// <summary>Field number for the "uvAnimationMaskTexture" field.</summary>
    public const int UvAnimationMaskTextureFieldNumber = 23;
    private static readonly pb::FieldCodec<int?> _single_uvAnimationMaskTexture_codec = pb::FieldCodec.ForStructWrapper<int>(186);
    private int? uvAnimationMaskTexture_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? UvAnimationMaskTexture {
      get { return uvAnimationMaskTexture_; }
      set {
        uvAnimationMaskTexture_ = value;
      }
    }


    /// <summary>Field number for the "uvAnimationScrollXSpeedFactor" field.</summary>
    public const int UvAnimationScrollXSpeedFactorFieldNumber = 24;
    private static readonly pb::FieldCodec<float?> _single_uvAnimationScrollXSpeedFactor_codec = pb::FieldCodec.ForStructWrapper<float>(194);
    private float? uvAnimationScrollXSpeedFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? UvAnimationScrollXSpeedFactor {
      get { return uvAnimationScrollXSpeedFactor_; }
      set {
        uvAnimationScrollXSpeedFactor_ = value;
      }
    }


    /// <summary>Field number for the "uvAnimationScrollYSpeedFactor" field.</summary>
    public const int UvAnimationScrollYSpeedFactorFieldNumber = 25;
    private static readonly pb::FieldCodec<float?> _single_uvAnimationScrollYSpeedFactor_codec = pb::FieldCodec.ForStructWrapper<float>(202);
    private float? uvAnimationScrollYSpeedFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? UvAnimationScrollYSpeedFactor {
      get { return uvAnimationScrollYSpeedFactor_; }
      set {
        uvAnimationScrollYSpeedFactor_ = value;
      }
    }


    /// <summary>Field number for the "uvAnimationRotationSpeedFactor" field.</summary>
    public const int UvAnimationRotationSpeedFactorFieldNumber = 26;
    private static readonly pb::FieldCodec<float?> _single_uvAnimationRotationSpeedFactor_codec = pb::FieldCodec.ForStructWrapper<float>(210);
    private float? uvAnimationRotationSpeedFactor_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? UvAnimationRotationSpeedFactor {
      get { return uvAnimationRotationSpeedFactor_; }
      set {
        uvAnimationRotationSpeedFactor_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VRMC_materials_mtoon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VRMC_materials_mtoon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (TransparentWithZWrite != other.TransparentWithZWrite) return false;
      if (RenderQueueOffsetNumber != other.RenderQueueOffsetNumber) return false;
      if(!shadeFactor_.Equals(other.shadeFactor_)) return false;
      if (ShadeMultiplyTexture != other.ShadeMultiplyTexture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(ShadingShiftFactor, other.ShadingShiftFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(ShadingToonyFactor, other.ShadingToonyFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(LightColorAttenuationFactor, other.LightColorAttenuationFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(GiIntensityFactor, other.GiIntensityFactor)) return false;
      if (AdditiveTexture != other.AdditiveTexture) return false;
      if(!rimFactor_.Equals(other.rimFactor_)) return false;
      if (RimMultiplyTexture != other.RimMultiplyTexture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(RimLightingMixFactor, other.RimLightingMixFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(RimFresnelPowerFactor, other.RimFresnelPowerFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(RimLiftFactor, other.RimLiftFactor)) return false;
      if (OutlineWidthMode != other.OutlineWidthMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(OutlineWidthFactor, other.OutlineWidthFactor)) return false;
      if (OutlineWidthMultiplyTexture != other.OutlineWidthMultiplyTexture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(OutlineScaledMaxDistanceFactor, other.OutlineScaledMaxDistanceFactor)) return false;
      if (OutlineColorMode != other.OutlineColorMode) return false;
      if(!outlineFactor_.Equals(other.outlineFactor_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(OutlineLightingMixFactor, other.OutlineLightingMixFactor)) return false;
      if (UvAnimationMaskTexture != other.UvAnimationMaskTexture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(UvAnimationScrollXSpeedFactor, other.UvAnimationScrollXSpeedFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(UvAnimationScrollYSpeedFactor, other.UvAnimationScrollYSpeedFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(UvAnimationRotationSpeedFactor, other.UvAnimationRotationSpeedFactor)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (transparentWithZWrite_ != null) hash ^= TransparentWithZWrite.GetHashCode();
      if (renderQueueOffsetNumber_ != null) hash ^= RenderQueueOffsetNumber.GetHashCode();
      hash ^= shadeFactor_.GetHashCode();
      if (shadeMultiplyTexture_ != null) hash ^= ShadeMultiplyTexture.GetHashCode();
      if (shadingShiftFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(ShadingShiftFactor);
      if (shadingToonyFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(ShadingToonyFactor);
      if (lightColorAttenuationFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(LightColorAttenuationFactor);
      if (giIntensityFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(GiIntensityFactor);
      if (additiveTexture_ != null) hash ^= AdditiveTexture.GetHashCode();
      hash ^= rimFactor_.GetHashCode();
      if (rimMultiplyTexture_ != null) hash ^= RimMultiplyTexture.GetHashCode();
      if (rimLightingMixFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(RimLightingMixFactor);
      if (rimFresnelPowerFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(RimFresnelPowerFactor);
      if (rimLiftFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(RimLiftFactor);
      if (OutlineWidthMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode.None) hash ^= OutlineWidthMode.GetHashCode();
      if (outlineWidthFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(OutlineWidthFactor);
      if (outlineWidthMultiplyTexture_ != null) hash ^= OutlineWidthMultiplyTexture.GetHashCode();
      if (outlineScaledMaxDistanceFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(OutlineScaledMaxDistanceFactor);
      if (OutlineColorMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode.FixedColor) hash ^= OutlineColorMode.GetHashCode();
      hash ^= outlineFactor_.GetHashCode();
      if (outlineLightingMixFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(OutlineLightingMixFactor);
      if (uvAnimationMaskTexture_ != null) hash ^= UvAnimationMaskTexture.GetHashCode();
      if (uvAnimationScrollXSpeedFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(UvAnimationScrollXSpeedFactor);
      if (uvAnimationScrollYSpeedFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(UvAnimationScrollYSpeedFactor);
      if (uvAnimationRotationSpeedFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(UvAnimationRotationSpeedFactor);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (transparentWithZWrite_ != null) {
        _single_transparentWithZWrite_codec.WriteTagAndValue(output, TransparentWithZWrite);
      }
      if (renderQueueOffsetNumber_ != null) {
        _single_renderQueueOffsetNumber_codec.WriteTagAndValue(output, RenderQueueOffsetNumber);
      }
      shadeFactor_.WriteTo(output, _repeated_shadeFactor_codec);
      if (shadeMultiplyTexture_ != null) {
        _single_shadeMultiplyTexture_codec.WriteTagAndValue(output, ShadeMultiplyTexture);
      }
      if (shadingShiftFactor_ != null) {
        _single_shadingShiftFactor_codec.WriteTagAndValue(output, ShadingShiftFactor);
      }
      if (shadingToonyFactor_ != null) {
        _single_shadingToonyFactor_codec.WriteTagAndValue(output, ShadingToonyFactor);
      }
      if (lightColorAttenuationFactor_ != null) {
        _single_lightColorAttenuationFactor_codec.WriteTagAndValue(output, LightColorAttenuationFactor);
      }
      if (giIntensityFactor_ != null) {
        _single_giIntensityFactor_codec.WriteTagAndValue(output, GiIntensityFactor);
      }
      if (additiveTexture_ != null) {
        _single_additiveTexture_codec.WriteTagAndValue(output, AdditiveTexture);
      }
      rimFactor_.WriteTo(output, _repeated_rimFactor_codec);
      if (rimMultiplyTexture_ != null) {
        _single_rimMultiplyTexture_codec.WriteTagAndValue(output, RimMultiplyTexture);
      }
      if (rimLightingMixFactor_ != null) {
        _single_rimLightingMixFactor_codec.WriteTagAndValue(output, RimLightingMixFactor);
      }
      if (rimFresnelPowerFactor_ != null) {
        _single_rimFresnelPowerFactor_codec.WriteTagAndValue(output, RimFresnelPowerFactor);
      }
      if (rimLiftFactor_ != null) {
        _single_rimLiftFactor_codec.WriteTagAndValue(output, RimLiftFactor);
      }
      if (OutlineWidthMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode.None) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) OutlineWidthMode);
      }
      if (outlineWidthFactor_ != null) {
        _single_outlineWidthFactor_codec.WriteTagAndValue(output, OutlineWidthFactor);
      }
      if (outlineWidthMultiplyTexture_ != null) {
        _single_outlineWidthMultiplyTexture_codec.WriteTagAndValue(output, OutlineWidthMultiplyTexture);
      }
      if (outlineScaledMaxDistanceFactor_ != null) {
        _single_outlineScaledMaxDistanceFactor_codec.WriteTagAndValue(output, OutlineScaledMaxDistanceFactor);
      }
      if (OutlineColorMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode.FixedColor) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) OutlineColorMode);
      }
      outlineFactor_.WriteTo(output, _repeated_outlineFactor_codec);
      if (outlineLightingMixFactor_ != null) {
        _single_outlineLightingMixFactor_codec.WriteTagAndValue(output, OutlineLightingMixFactor);
      }
      if (uvAnimationMaskTexture_ != null) {
        _single_uvAnimationMaskTexture_codec.WriteTagAndValue(output, UvAnimationMaskTexture);
      }
      if (uvAnimationScrollXSpeedFactor_ != null) {
        _single_uvAnimationScrollXSpeedFactor_codec.WriteTagAndValue(output, UvAnimationScrollXSpeedFactor);
      }
      if (uvAnimationScrollYSpeedFactor_ != null) {
        _single_uvAnimationScrollYSpeedFactor_codec.WriteTagAndValue(output, UvAnimationScrollYSpeedFactor);
      }
      if (uvAnimationRotationSpeedFactor_ != null) {
        _single_uvAnimationRotationSpeedFactor_codec.WriteTagAndValue(output, UvAnimationRotationSpeedFactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (transparentWithZWrite_ != null) {
        size += _single_transparentWithZWrite_codec.CalculateSizeWithTag(TransparentWithZWrite);
      }
      if (renderQueueOffsetNumber_ != null) {
        size += _single_renderQueueOffsetNumber_codec.CalculateSizeWithTag(RenderQueueOffsetNumber);
      }
      size += shadeFactor_.CalculateSize(_repeated_shadeFactor_codec);
      if (shadeMultiplyTexture_ != null) {
        size += _single_shadeMultiplyTexture_codec.CalculateSizeWithTag(ShadeMultiplyTexture);
      }
      if (shadingShiftFactor_ != null) {
        size += _single_shadingShiftFactor_codec.CalculateSizeWithTag(ShadingShiftFactor);
      }
      if (shadingToonyFactor_ != null) {
        size += _single_shadingToonyFactor_codec.CalculateSizeWithTag(ShadingToonyFactor);
      }
      if (lightColorAttenuationFactor_ != null) {
        size += _single_lightColorAttenuationFactor_codec.CalculateSizeWithTag(LightColorAttenuationFactor);
      }
      if (giIntensityFactor_ != null) {
        size += _single_giIntensityFactor_codec.CalculateSizeWithTag(GiIntensityFactor);
      }
      if (additiveTexture_ != null) {
        size += _single_additiveTexture_codec.CalculateSizeWithTag(AdditiveTexture);
      }
      size += rimFactor_.CalculateSize(_repeated_rimFactor_codec);
      if (rimMultiplyTexture_ != null) {
        size += _single_rimMultiplyTexture_codec.CalculateSizeWithTag(RimMultiplyTexture);
      }
      if (rimLightingMixFactor_ != null) {
        size += _single_rimLightingMixFactor_codec.CalculateSizeWithTag(RimLightingMixFactor);
      }
      if (rimFresnelPowerFactor_ != null) {
        size += _single_rimFresnelPowerFactor_codec.CalculateSizeWithTag(RimFresnelPowerFactor);
      }
      if (rimLiftFactor_ != null) {
        size += _single_rimLiftFactor_codec.CalculateSizeWithTag(RimLiftFactor);
      }
      if (OutlineWidthMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OutlineWidthMode);
      }
      if (outlineWidthFactor_ != null) {
        size += _single_outlineWidthFactor_codec.CalculateSizeWithTag(OutlineWidthFactor);
      }
      if (outlineWidthMultiplyTexture_ != null) {
        size += _single_outlineWidthMultiplyTexture_codec.CalculateSizeWithTag(OutlineWidthMultiplyTexture);
      }
      if (outlineScaledMaxDistanceFactor_ != null) {
        size += _single_outlineScaledMaxDistanceFactor_codec.CalculateSizeWithTag(OutlineScaledMaxDistanceFactor);
      }
      if (OutlineColorMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode.FixedColor) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OutlineColorMode);
      }
      size += outlineFactor_.CalculateSize(_repeated_outlineFactor_codec);
      if (outlineLightingMixFactor_ != null) {
        size += _single_outlineLightingMixFactor_codec.CalculateSizeWithTag(OutlineLightingMixFactor);
      }
      if (uvAnimationMaskTexture_ != null) {
        size += _single_uvAnimationMaskTexture_codec.CalculateSizeWithTag(UvAnimationMaskTexture);
      }
      if (uvAnimationScrollXSpeedFactor_ != null) {
        size += _single_uvAnimationScrollXSpeedFactor_codec.CalculateSizeWithTag(UvAnimationScrollXSpeedFactor);
      }
      if (uvAnimationScrollYSpeedFactor_ != null) {
        size += _single_uvAnimationScrollYSpeedFactor_codec.CalculateSizeWithTag(UvAnimationScrollYSpeedFactor);
      }
      if (uvAnimationRotationSpeedFactor_ != null) {
        size += _single_uvAnimationRotationSpeedFactor_codec.CalculateSizeWithTag(UvAnimationRotationSpeedFactor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VRMC_materials_mtoon other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.transparentWithZWrite_ != null) {
        if (transparentWithZWrite_ == null || other.TransparentWithZWrite != false) {
          TransparentWithZWrite = other.TransparentWithZWrite;
        }
      }
      if (other.renderQueueOffsetNumber_ != null) {
        if (renderQueueOffsetNumber_ == null || other.RenderQueueOffsetNumber != 0) {
          RenderQueueOffsetNumber = other.RenderQueueOffsetNumber;
        }
      }
      shadeFactor_.Add(other.shadeFactor_);
      if (other.shadeMultiplyTexture_ != null) {
        if (shadeMultiplyTexture_ == null || other.ShadeMultiplyTexture != 0) {
          ShadeMultiplyTexture = other.ShadeMultiplyTexture;
        }
      }
      if (other.shadingShiftFactor_ != null) {
        if (shadingShiftFactor_ == null || other.ShadingShiftFactor != 0F) {
          ShadingShiftFactor = other.ShadingShiftFactor;
        }
      }
      if (other.shadingToonyFactor_ != null) {
        if (shadingToonyFactor_ == null || other.ShadingToonyFactor != 0F) {
          ShadingToonyFactor = other.ShadingToonyFactor;
        }
      }
      if (other.lightColorAttenuationFactor_ != null) {
        if (lightColorAttenuationFactor_ == null || other.LightColorAttenuationFactor != 0F) {
          LightColorAttenuationFactor = other.LightColorAttenuationFactor;
        }
      }
      if (other.giIntensityFactor_ != null) {
        if (giIntensityFactor_ == null || other.GiIntensityFactor != 0F) {
          GiIntensityFactor = other.GiIntensityFactor;
        }
      }
      if (other.additiveTexture_ != null) {
        if (additiveTexture_ == null || other.AdditiveTexture != 0) {
          AdditiveTexture = other.AdditiveTexture;
        }
      }
      rimFactor_.Add(other.rimFactor_);
      if (other.rimMultiplyTexture_ != null) {
        if (rimMultiplyTexture_ == null || other.RimMultiplyTexture != 0) {
          RimMultiplyTexture = other.RimMultiplyTexture;
        }
      }
      if (other.rimLightingMixFactor_ != null) {
        if (rimLightingMixFactor_ == null || other.RimLightingMixFactor != 0F) {
          RimLightingMixFactor = other.RimLightingMixFactor;
        }
      }
      if (other.rimFresnelPowerFactor_ != null) {
        if (rimFresnelPowerFactor_ == null || other.RimFresnelPowerFactor != 0F) {
          RimFresnelPowerFactor = other.RimFresnelPowerFactor;
        }
      }
      if (other.rimLiftFactor_ != null) {
        if (rimLiftFactor_ == null || other.RimLiftFactor != 0F) {
          RimLiftFactor = other.RimLiftFactor;
        }
      }
      if (other.OutlineWidthMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode.None) {
        OutlineWidthMode = other.OutlineWidthMode;
      }
      if (other.outlineWidthFactor_ != null) {
        if (outlineWidthFactor_ == null || other.OutlineWidthFactor != 0F) {
          OutlineWidthFactor = other.OutlineWidthFactor;
        }
      }
      if (other.outlineWidthMultiplyTexture_ != null) {
        if (outlineWidthMultiplyTexture_ == null || other.OutlineWidthMultiplyTexture != 0) {
          OutlineWidthMultiplyTexture = other.OutlineWidthMultiplyTexture;
        }
      }
      if (other.outlineScaledMaxDistanceFactor_ != null) {
        if (outlineScaledMaxDistanceFactor_ == null || other.OutlineScaledMaxDistanceFactor != 0F) {
          OutlineScaledMaxDistanceFactor = other.OutlineScaledMaxDistanceFactor;
        }
      }
      if (other.OutlineColorMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode.FixedColor) {
        OutlineColorMode = other.OutlineColorMode;
      }
      outlineFactor_.Add(other.outlineFactor_);
      if (other.outlineLightingMixFactor_ != null) {
        if (outlineLightingMixFactor_ == null || other.OutlineLightingMixFactor != 0F) {
          OutlineLightingMixFactor = other.OutlineLightingMixFactor;
        }
      }
      if (other.uvAnimationMaskTexture_ != null) {
        if (uvAnimationMaskTexture_ == null || other.UvAnimationMaskTexture != 0) {
          UvAnimationMaskTexture = other.UvAnimationMaskTexture;
        }
      }
      if (other.uvAnimationScrollXSpeedFactor_ != null) {
        if (uvAnimationScrollXSpeedFactor_ == null || other.UvAnimationScrollXSpeedFactor != 0F) {
          UvAnimationScrollXSpeedFactor = other.UvAnimationScrollXSpeedFactor;
        }
      }
      if (other.uvAnimationScrollYSpeedFactor_ != null) {
        if (uvAnimationScrollYSpeedFactor_ == null || other.UvAnimationScrollYSpeedFactor != 0F) {
          UvAnimationScrollYSpeedFactor = other.UvAnimationScrollYSpeedFactor;
        }
      }
      if (other.uvAnimationRotationSpeedFactor_ != null) {
        if (uvAnimationRotationSpeedFactor_ == null || other.UvAnimationRotationSpeedFactor != 0F) {
          UvAnimationRotationSpeedFactor = other.UvAnimationRotationSpeedFactor;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            bool? value = _single_transparentWithZWrite_codec.Read(input);
            if (transparentWithZWrite_ == null || value != false) {
              TransparentWithZWrite = value;
            }
            break;
          }
          case 26: {
            int? value = _single_renderQueueOffsetNumber_codec.Read(input);
            if (renderQueueOffsetNumber_ == null || value != 0) {
              RenderQueueOffsetNumber = value;
            }
            break;
          }
          case 34:
          case 37: {
            shadeFactor_.AddEntriesFrom(input, _repeated_shadeFactor_codec);
            break;
          }
          case 42: {
            int? value = _single_shadeMultiplyTexture_codec.Read(input);
            if (shadeMultiplyTexture_ == null || value != 0) {
              ShadeMultiplyTexture = value;
            }
            break;
          }
          case 50: {
            float? value = _single_shadingShiftFactor_codec.Read(input);
            if (shadingShiftFactor_ == null || value != 0F) {
              ShadingShiftFactor = value;
            }
            break;
          }
          case 58: {
            float? value = _single_shadingToonyFactor_codec.Read(input);
            if (shadingToonyFactor_ == null || value != 0F) {
              ShadingToonyFactor = value;
            }
            break;
          }
          case 66: {
            float? value = _single_lightColorAttenuationFactor_codec.Read(input);
            if (lightColorAttenuationFactor_ == null || value != 0F) {
              LightColorAttenuationFactor = value;
            }
            break;
          }
          case 74: {
            float? value = _single_giIntensityFactor_codec.Read(input);
            if (giIntensityFactor_ == null || value != 0F) {
              GiIntensityFactor = value;
            }
            break;
          }
          case 82: {
            int? value = _single_additiveTexture_codec.Read(input);
            if (additiveTexture_ == null || value != 0) {
              AdditiveTexture = value;
            }
            break;
          }
          case 90:
          case 93: {
            rimFactor_.AddEntriesFrom(input, _repeated_rimFactor_codec);
            break;
          }
          case 98: {
            int? value = _single_rimMultiplyTexture_codec.Read(input);
            if (rimMultiplyTexture_ == null || value != 0) {
              RimMultiplyTexture = value;
            }
            break;
          }
          case 106: {
            float? value = _single_rimLightingMixFactor_codec.Read(input);
            if (rimLightingMixFactor_ == null || value != 0F) {
              RimLightingMixFactor = value;
            }
            break;
          }
          case 114: {
            float? value = _single_rimFresnelPowerFactor_codec.Read(input);
            if (rimFresnelPowerFactor_ == null || value != 0F) {
              RimFresnelPowerFactor = value;
            }
            break;
          }
          case 122: {
            float? value = _single_rimLiftFactor_codec.Read(input);
            if (rimLiftFactor_ == null || value != 0F) {
              RimLiftFactor = value;
            }
            break;
          }
          case 128: {
            OutlineWidthMode = (global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode) input.ReadEnum();
            break;
          }
          case 138: {
            float? value = _single_outlineWidthFactor_codec.Read(input);
            if (outlineWidthFactor_ == null || value != 0F) {
              OutlineWidthFactor = value;
            }
            break;
          }
          case 146: {
            int? value = _single_outlineWidthMultiplyTexture_codec.Read(input);
            if (outlineWidthMultiplyTexture_ == null || value != 0) {
              OutlineWidthMultiplyTexture = value;
            }
            break;
          }
          case 154: {
            float? value = _single_outlineScaledMaxDistanceFactor_codec.Read(input);
            if (outlineScaledMaxDistanceFactor_ == null || value != 0F) {
              OutlineScaledMaxDistanceFactor = value;
            }
            break;
          }
          case 160: {
            OutlineColorMode = (global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode) input.ReadEnum();
            break;
          }
          case 170:
          case 173: {
            outlineFactor_.AddEntriesFrom(input, _repeated_outlineFactor_codec);
            break;
          }
          case 178: {
            float? value = _single_outlineLightingMixFactor_codec.Read(input);
            if (outlineLightingMixFactor_ == null || value != 0F) {
              OutlineLightingMixFactor = value;
            }
            break;
          }
          case 186: {
            int? value = _single_uvAnimationMaskTexture_codec.Read(input);
            if (uvAnimationMaskTexture_ == null || value != 0) {
              UvAnimationMaskTexture = value;
            }
            break;
          }
          case 194: {
            float? value = _single_uvAnimationScrollXSpeedFactor_codec.Read(input);
            if (uvAnimationScrollXSpeedFactor_ == null || value != 0F) {
              UvAnimationScrollXSpeedFactor = value;
            }
            break;
          }
          case 202: {
            float? value = _single_uvAnimationScrollYSpeedFactor_codec.Read(input);
            if (uvAnimationScrollYSpeedFactor_ == null || value != 0F) {
              UvAnimationScrollYSpeedFactor = value;
            }
            break;
          }
          case 210: {
            float? value = _single_uvAnimationRotationSpeedFactor_codec.Read(input);
            if (uvAnimationRotationSpeedFactor_ == null || value != 0F) {
              UvAnimationRotationSpeedFactor = value;
            }
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VRMC_materials_mtoon message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum OutlineWidthMode {
        [pbr::OriginalName("none")] None = 0,
        [pbr::OriginalName("worldCoordinates")] WorldCoordinates = 1,
        [pbr::OriginalName("screenCoordinates")] ScreenCoordinates = 2,
      }

      public enum OutlineColorMode {
        [pbr::OriginalName("fixedColor")] FixedColor = 0,
        [pbr::OriginalName("mixedLighting")] MixedLighting = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code

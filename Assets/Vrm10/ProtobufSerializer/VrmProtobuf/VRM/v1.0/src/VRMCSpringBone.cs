// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: VRMC_springBone.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VrmProtobuf {

  /// <summary>Holder for reflection information generated from VRMC_springBone.proto</summary>
  public static partial class VRMCSpringBoneReflection {

    #region Descriptor
    /// <summary>File descriptor for VRMC_springBone.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VRMCSpringBoneReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVWUk1DX3NwcmluZ0JvbmUucHJvdG8SC1ZybVByb3RvYnVmGh5nb29nbGUv",
            "cHJvdG9idWYvd3JhcHBlcnMucHJvdG8i8wQKDlZSTUNTcHJpbmdCb25lEjkK",
            "CmJvbmVHcm91cHMYASADKAsyJS5Wcm1Qcm90b2J1Zi5WUk1DU3ByaW5nQm9u",
            "ZS5Cb25lR3JvdXASQQoOY29sbGlkZXJHcm91cHMYAiADKAsyKS5Wcm1Qcm90",
            "b2J1Zi5WUk1DU3ByaW5nQm9uZS5Db2xsaWRlckdyb3VwGtABCglCb25lR3Jv",
            "dXASDAoEbmFtZRgBIAEoCRIRCglzdGlmZm5lc3MYAiABKAISFAoMZ3Jhdml0",
            "eVBvd2VyGAMgASgCEhIKCmdyYXZpdHlEaXIYBCADKAISEQoJZHJhZ0ZvcmNl",
            "GAUgASgCEisKBmNlbnRlchgGIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQz",
            "MlZhbHVlEhEKCWhpdFJhZGl1cxgHIAEoAhINCgVib25lcxgIIAMoBRIWCg5j",
            "b2xsaWRlckdyb3VwcxgJIAMoBRqPAgoNQ29sbGlkZXJHcm91cBIMCgRub2Rl",
            "GAEgASgFEkUKCWNvbGxpZGVycxgCIAMoCzIyLlZybVByb3RvYnVmLlZSTUNT",
            "cHJpbmdCb25lLkNvbGxpZGVyR3JvdXAuQ29sbGlkZXIafwoIQ29sbGlkZXIS",
            "RQoEdHlwZRgBIAEoDjI3LlZybVByb3RvYnVmLlZSTUNTcHJpbmdCb25lLkNv",
            "bGxpZGVyR3JvdXAuQ29sbGlkZXJUeXBlcxIOCgZvZmZzZXQYAiADKAISDgoG",
            "cmFkaXVzGAMgASgCEgwKBHRhaWwYBCADKAIiKAoNQ29sbGlkZXJUeXBlcxIK",
            "CgZzcGhlcmUQABILCgdjYXBzdWxlEAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.VRMCSpringBone), global::VrmProtobuf.VRMCSpringBone.Parser, new[]{ "BoneGroups", "ColliderGroups" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.VRMCSpringBone.Types.BoneGroup), global::VrmProtobuf.VRMCSpringBone.Types.BoneGroup.Parser, new[]{ "Name", "Stiffness", "GravityPower", "GravityDir", "DragForce", "Center", "HitRadius", "Bones", "ColliderGroups" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup), global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Parser, new[]{ "Node", "Colliders" }, null, new[]{ typeof(global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.ColliderTypes) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.Collider), global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.Collider.Parser, new[]{ "Type", "Offset", "Radius", "Tail" }, null, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// SpringBone makes objects such as costumes and hair swaying
  /// </summary>
  public sealed partial class VRMCSpringBone : pb::IMessage<VRMCSpringBone> {
    private static readonly pb::MessageParser<VRMCSpringBone> _parser = new pb::MessageParser<VRMCSpringBone>(() => new VRMCSpringBone());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VRMCSpringBone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.VRMCSpringBoneReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRMCSpringBone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRMCSpringBone(VRMCSpringBone other) : this() {
      boneGroups_ = other.boneGroups_.Clone();
      colliderGroups_ = other.colliderGroups_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRMCSpringBone Clone() {
      return new VRMCSpringBone(this);
    }

    /// <summary>Field number for the "boneGroups" field.</summary>
    public const int BoneGroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::VrmProtobuf.VRMCSpringBone.Types.BoneGroup> _repeated_boneGroups_codec
        = pb::FieldCodec.ForMessage(10, global::VrmProtobuf.VRMCSpringBone.Types.BoneGroup.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.VRMCSpringBone.Types.BoneGroup> boneGroups_ = new pbc::RepeatedField<global::VrmProtobuf.VRMCSpringBone.Types.BoneGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.VRMCSpringBone.Types.BoneGroup> BoneGroups {
      get { return boneGroups_; }
    }

    /// <summary>Field number for the "colliderGroups" field.</summary>
    public const int ColliderGroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup> _repeated_colliderGroups_codec
        = pb::FieldCodec.ForMessage(18, global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Parser);
    private readonly pbc::RepeatedField<global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup> colliderGroups_ = new pbc::RepeatedField<global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup> ColliderGroups {
      get { return colliderGroups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VRMCSpringBone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VRMCSpringBone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boneGroups_.Equals(other.boneGroups_)) return false;
      if(!colliderGroups_.Equals(other.colliderGroups_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boneGroups_.GetHashCode();
      hash ^= colliderGroups_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      boneGroups_.WriteTo(output, _repeated_boneGroups_codec);
      colliderGroups_.WriteTo(output, _repeated_colliderGroups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boneGroups_.CalculateSize(_repeated_boneGroups_codec);
      size += colliderGroups_.CalculateSize(_repeated_colliderGroups_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VRMCSpringBone other) {
      if (other == null) {
        return;
      }
      boneGroups_.Add(other.boneGroups_);
      colliderGroups_.Add(other.colliderGroups_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            boneGroups_.AddEntriesFrom(input, _repeated_boneGroups_codec);
            break;
          }
          case 18: {
            colliderGroups_.AddEntriesFrom(input, _repeated_colliderGroups_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VRMCSpringBone message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Bone group swaying with SpringBone.
      /// "required": [ "stiffness", "gravityPower", "dragForce", "hitRadius"]
      /// </summary>
      public sealed partial class BoneGroup : pb::IMessage<BoneGroup> {
        private static readonly pb::MessageParser<BoneGroup> _parser = new pb::MessageParser<BoneGroup>(() => new BoneGroup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BoneGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VrmProtobuf.VRMCSpringBone.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoneGroup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoneGroup(BoneGroup other) : this() {
          name_ = other.name_;
          stiffness_ = other.stiffness_;
          gravityPower_ = other.gravityPower_;
          gravityDir_ = other.gravityDir_.Clone();
          dragForce_ = other.dragForce_;
          Center = other.Center;
          hitRadius_ = other.hitRadius_;
          bones_ = other.bones_.Clone();
          colliderGroups_ = other.colliderGroups_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BoneGroup Clone() {
          return new BoneGroup(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "stiffness" field.</summary>
        public const int StiffnessFieldNumber = 2;
        private float stiffness_;
        /// <summary>
        /// The force to return to the initial pose
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Stiffness {
          get { return stiffness_; }
          set {
            stiffness_ = value;
          }
        }

        /// <summary>Field number for the "gravityPower" field.</summary>
        public const int GravityPowerFieldNumber = 3;
        private float gravityPower_;
        /// <summary>
        /// Gravitational acceleration
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float GravityPower {
          get { return gravityPower_; }
          set {
            gravityPower_ = value;
          }
        }

        /// <summary>Field number for the "gravityDir" field.</summary>
        public const int GravityDirFieldNumber = 4;
        private static readonly pb::FieldCodec<float> _repeated_gravityDir_codec
            = pb::FieldCodec.ForFloat(34);
        private readonly pbc::RepeatedField<float> gravityDir_ = new pbc::RepeatedField<float>();
        /// <summary>
        /// The direction of gravity. A gravity other than downward direction also works.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> GravityDir {
          get { return gravityDir_; }
        }

        /// <summary>Field number for the "dragForce" field.</summary>
        public const int DragForceFieldNumber = 5;
        private float dragForce_;
        /// <summary>
        /// Air resistance. Deceleration force
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DragForce {
          get { return dragForce_; }
          set {
            dragForce_ = value;
          }
        }

        /// <summary>Field number for the "center" field.</summary>
        public const int CenterFieldNumber = 6;
        private static readonly pb::FieldCodec<int?> _single_center_codec = pb::FieldCodec.ForStructWrapper<int>(50);
        private int? center_;
        /// <summary>
        /// The index of the node to be the local coordinate
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int? Center {
          get { return center_; }
          set {
            center_ = value;
          }
        }


        /// <summary>Field number for the "hitRadius" field.</summary>
        public const int HitRadiusFieldNumber = 7;
        private float hitRadius_;
        /// <summary>
        /// The radius of the sphere used for the collision detection with colliders
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float HitRadius {
          get { return hitRadius_; }
          set {
            hitRadius_ = value;
          }
        }

        /// <summary>Field number for the "bones" field.</summary>
        public const int BonesFieldNumber = 8;
        private static readonly pb::FieldCodec<int> _repeated_bones_codec
            = pb::FieldCodec.ForInt32(66);
        private readonly pbc::RepeatedField<int> bones_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// The node index array to set SpringBone
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Bones {
          get { return bones_; }
        }

        /// <summary>Field number for the "colliderGroups" field.</summary>
        public const int ColliderGroupsFieldNumber = 9;
        private static readonly pb::FieldCodec<int> _repeated_colliderGroups_codec
            = pb::FieldCodec.ForInt32(74);
        private readonly pbc::RepeatedField<int> colliderGroups_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// Process collision detection. colliderGroup index
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> ColliderGroups {
          get { return colliderGroups_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BoneGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BoneGroup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Stiffness, other.Stiffness)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GravityPower, other.GravityPower)) return false;
          if(!gravityDir_.Equals(other.gravityDir_)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DragForce, other.DragForce)) return false;
          if (Center != other.Center) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitRadius, other.HitRadius)) return false;
          if(!bones_.Equals(other.bones_)) return false;
          if(!colliderGroups_.Equals(other.colliderGroups_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Stiffness != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Stiffness);
          if (GravityPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GravityPower);
          hash ^= gravityDir_.GetHashCode();
          if (DragForce != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DragForce);
          if (center_ != null) hash ^= Center.GetHashCode();
          if (HitRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitRadius);
          hash ^= bones_.GetHashCode();
          hash ^= colliderGroups_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Stiffness != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Stiffness);
          }
          if (GravityPower != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(GravityPower);
          }
          gravityDir_.WriteTo(output, _repeated_gravityDir_codec);
          if (DragForce != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(DragForce);
          }
          if (center_ != null) {
            _single_center_codec.WriteTagAndValue(output, Center);
          }
          if (HitRadius != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(HitRadius);
          }
          bones_.WriteTo(output, _repeated_bones_codec);
          colliderGroups_.WriteTo(output, _repeated_colliderGroups_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Stiffness != 0F) {
            size += 1 + 4;
          }
          if (GravityPower != 0F) {
            size += 1 + 4;
          }
          size += gravityDir_.CalculateSize(_repeated_gravityDir_codec);
          if (DragForce != 0F) {
            size += 1 + 4;
          }
          if (center_ != null) {
            size += _single_center_codec.CalculateSizeWithTag(Center);
          }
          if (HitRadius != 0F) {
            size += 1 + 4;
          }
          size += bones_.CalculateSize(_repeated_bones_codec);
          size += colliderGroups_.CalculateSize(_repeated_colliderGroups_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BoneGroup other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Stiffness != 0F) {
            Stiffness = other.Stiffness;
          }
          if (other.GravityPower != 0F) {
            GravityPower = other.GravityPower;
          }
          gravityDir_.Add(other.gravityDir_);
          if (other.DragForce != 0F) {
            DragForce = other.DragForce;
          }
          if (other.center_ != null) {
            if (center_ == null || other.Center != 0) {
              Center = other.Center;
            }
          }
          if (other.HitRadius != 0F) {
            HitRadius = other.HitRadius;
          }
          bones_.Add(other.bones_);
          colliderGroups_.Add(other.colliderGroups_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 21: {
                Stiffness = input.ReadFloat();
                break;
              }
              case 29: {
                GravityPower = input.ReadFloat();
                break;
              }
              case 34:
              case 37: {
                gravityDir_.AddEntriesFrom(input, _repeated_gravityDir_codec);
                break;
              }
              case 45: {
                DragForce = input.ReadFloat();
                break;
              }
              case 50: {
                int? value = _single_center_codec.Read(input);
                if (center_ == null || value != 0) {
                  Center = value;
                }
                break;
              }
              case 61: {
                HitRadius = input.ReadFloat();
                break;
              }
              case 66:
              case 64: {
                bones_.AddEntriesFrom(input, _repeated_bones_codec);
                break;
              }
              case 74:
              case 72: {
                colliderGroups_.AddEntriesFrom(input, _repeated_colliderGroups_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Collider group for collisions with swaying objects.
      /// "required": ["node"]
      /// </summary>
      public sealed partial class ColliderGroup : pb::IMessage<ColliderGroup> {
        private static readonly pb::MessageParser<ColliderGroup> _parser = new pb::MessageParser<ColliderGroup>(() => new ColliderGroup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ColliderGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VrmProtobuf.VRMCSpringBone.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ColliderGroup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ColliderGroup(ColliderGroup other) : this() {
          node_ = other.node_;
          colliders_ = other.colliders_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ColliderGroup Clone() {
          return new ColliderGroup(this);
        }

        /// <summary>Field number for the "node" field.</summary>
        public const int NodeFieldNumber = 1;
        private int node_;
        /// <summary>
        /// The node of the collider group for setting up collision detection
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Node {
          get { return node_; }
          set {
            node_ = value;
          }
        }

        /// <summary>Field number for the "colliders" field.</summary>
        public const int CollidersFieldNumber = 2;
        private static readonly pb::FieldCodec<global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.Collider> _repeated_colliders_codec
            = pb::FieldCodec.ForMessage(18, global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.Collider.Parser);
        private readonly pbc::RepeatedField<global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.Collider> colliders_ = new pbc::RepeatedField<global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.Collider>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.Collider> Colliders {
          get { return colliders_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ColliderGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ColliderGroup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Node != other.Node) return false;
          if(!colliders_.Equals(other.colliders_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Node != 0) hash ^= Node.GetHashCode();
          hash ^= colliders_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Node != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Node);
          }
          colliders_.WriteTo(output, _repeated_colliders_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Node != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Node);
          }
          size += colliders_.CalculateSize(_repeated_colliders_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ColliderGroup other) {
          if (other == null) {
            return;
          }
          if (other.Node != 0) {
            Node = other.Node;
          }
          colliders_.Add(other.colliders_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Node = input.ReadInt32();
                break;
              }
              case 18: {
                colliders_.AddEntriesFrom(input, _repeated_colliders_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ColliderGroup message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// collider shape type
          /// </summary>
          public enum ColliderTypes {
            [pbr::OriginalName("sphere")] Sphere = 0,
            [pbr::OriginalName("capsule")] Capsule = 1,
          }

          /// <summary>
          /// "required": [ "type", "radius" ]
          /// </summary>
          public sealed partial class Collider : pb::IMessage<Collider> {
            private static readonly pb::MessageParser<Collider> _parser = new pb::MessageParser<Collider>(() => new Collider());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Collider> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Collider() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Collider(Collider other) : this() {
              type_ = other.type_;
              offset_ = other.offset_.Clone();
              radius_ = other.radius_;
              tail_ = other.tail_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Collider Clone() {
              return new Collider(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.ColliderTypes type_ = global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.ColliderTypes.Sphere;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.ColliderTypes Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "offset" field.</summary>
            public const int OffsetFieldNumber = 2;
            private static readonly pb::FieldCodec<float> _repeated_offset_codec
                = pb::FieldCodec.ForFloat(18);
            private readonly pbc::RepeatedField<float> offset_ = new pbc::RepeatedField<float>();
            /// <summary>
            /// The local coordinate from the node of the collider group
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> Offset {
              get { return offset_; }
            }

            /// <summary>Field number for the "radius" field.</summary>
            public const int RadiusFieldNumber = 3;
            private float radius_;
            /// <summary>
            /// The radius of the collider
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Radius {
              get { return radius_; }
              set {
                radius_ = value;
              }
            }

            /// <summary>Field number for the "tail" field.</summary>
            public const int TailFieldNumber = 4;
            private static readonly pb::FieldCodec<float> _repeated_tail_codec
                = pb::FieldCodec.ForFloat(34);
            private readonly pbc::RepeatedField<float> tail_ = new pbc::RepeatedField<float>();
            /// <summary>
            /// The local coordinate from the node of the collider group. for capsule tail
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> Tail {
              get { return tail_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Collider);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Collider other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if(!offset_.Equals(other.offset_)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
              if(!tail_.Equals(other.tail_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Type != global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.ColliderTypes.Sphere) hash ^= Type.GetHashCode();
              hash ^= offset_.GetHashCode();
              if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
              hash ^= tail_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Type != global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.ColliderTypes.Sphere) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Type);
              }
              offset_.WriteTo(output, _repeated_offset_codec);
              if (Radius != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(Radius);
              }
              tail_.WriteTo(output, _repeated_tail_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Type != global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.ColliderTypes.Sphere) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              size += offset_.CalculateSize(_repeated_offset_codec);
              if (Radius != 0F) {
                size += 1 + 4;
              }
              size += tail_.CalculateSize(_repeated_tail_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Collider other) {
              if (other == null) {
                return;
              }
              if (other.Type != global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.ColliderTypes.Sphere) {
                Type = other.Type;
              }
              offset_.Add(other.offset_);
              if (other.Radius != 0F) {
                Radius = other.Radius;
              }
              tail_.Add(other.tail_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Type = (global::VrmProtobuf.VRMCSpringBone.Types.ColliderGroup.Types.ColliderTypes) input.ReadEnum();
                    break;
                  }
                  case 18:
                  case 21: {
                    offset_.AddEntriesFrom(input, _repeated_offset_codec);
                    break;
                  }
                  case 29: {
                    Radius = input.ReadFloat();
                    break;
                  }
                  case 34:
                  case 37: {
                    tail_.AddEntriesFrom(input, _repeated_tail_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code

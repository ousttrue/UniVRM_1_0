// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lookAt.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VrmProtobuf {

  /// <summary>Holder for reflection information generated from lookAt.proto</summary>
  public static partial class LookAtReflection {

    #region Descriptor
    /// <summary>File descriptor for lookAt.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LookAtReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxsb29rQXQucHJvdG8SC1ZybVByb3RvYnVmIjwKDkxvb2tBdFJhbmdlTWFw",
            "EhUKDWlucHV0TWF4VmFsdWUYASABKAISEwoLb3V0cHV0U2NhbGUYAiABKAIi",
            "6AIKBkxvb2tBdBIaChJvZmZzZXRGcm9tSGVhZEJvbmUYASADKAISMgoKbG9v",
            "a0F0VHlwZRgCIAEoDjIeLlZybVByb3RvYnVmLkxvb2tBdC5Mb29rQXRUeXBl",
            "EjoKFWxvb2tBdEhvcml6b250YWxJbm5lchgDIAEoCzIbLlZybVByb3RvYnVm",
            "Lkxvb2tBdFJhbmdlTWFwEjoKFWxvb2tBdEhvcml6b250YWxPdXRlchgEIAEo",
            "CzIbLlZybVByb3RvYnVmLkxvb2tBdFJhbmdlTWFwEjcKEmxvb2tBdFZlcnRp",
            "Y2FsRG93bhgFIAEoCzIbLlZybVByb3RvYnVmLkxvb2tBdFJhbmdlTWFwEjUK",
            "EGxvb2tBdFZlcnRpY2FsVXAYBiABKAsyGy5Wcm1Qcm90b2J1Zi5Mb29rQXRS",
            "YW5nZU1hcCImCgpMb29rQXRUeXBlEggKBGJvbmUQABIOCgpibGVuZFNoYXBl",
            "EAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.LookAtRangeMap), global::VrmProtobuf.LookAtRangeMap.Parser, new[]{ "InputMaxValue", "OutputScale" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.LookAt), global::VrmProtobuf.LookAt.Parser, new[]{ "OffsetFromHeadBone", "LookAtType", "LookAtHorizontalInner", "LookAtHorizontalOuter", "LookAtVerticalDown", "LookAtVerticalUp" }, null, new[]{ typeof(global::VrmProtobuf.LookAt.Types.LookAtType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Input the range and scale the output. "required": [ "inputMaxValue", "outputScale" ]
  /// </summary>
  public sealed partial class LookAtRangeMap : pb::IMessage<LookAtRangeMap> {
    private static readonly pb::MessageParser<LookAtRangeMap> _parser = new pb::MessageParser<LookAtRangeMap>(() => new LookAtRangeMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LookAtRangeMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.LookAtReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookAtRangeMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookAtRangeMap(LookAtRangeMap other) : this() {
      inputMaxValue_ = other.inputMaxValue_;
      outputScale_ = other.outputScale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookAtRangeMap Clone() {
      return new LookAtRangeMap(this);
    }

    /// <summary>Field number for the "inputMaxValue" field.</summary>
    public const int InputMaxValueFieldNumber = 1;
    private float inputMaxValue_;
    /// <summary>
    /// Yaw and pitch angles (degrees) between the head bone forward vector and the eye gaze LookAt vector
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InputMaxValue {
      get { return inputMaxValue_; }
      set {
        inputMaxValue_ = value;
      }
    }

    /// <summary>Field number for the "outputScale" field.</summary>
    public const int OutputScaleFieldNumber = 2;
    private float outputScale_;
    /// <summary>
    /// Degree for LookAtType.bone, Weight for LookAtType.blendShape
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutputScale {
      get { return outputScale_; }
      set {
        outputScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LookAtRangeMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LookAtRangeMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InputMaxValue, other.InputMaxValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OutputScale, other.OutputScale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputMaxValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InputMaxValue);
      if (OutputScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OutputScale);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputMaxValue != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(InputMaxValue);
      }
      if (OutputScale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(OutputScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputMaxValue != 0F) {
        size += 1 + 4;
      }
      if (OutputScale != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LookAtRangeMap other) {
      if (other == null) {
        return;
      }
      if (other.InputMaxValue != 0F) {
        InputMaxValue = other.InputMaxValue;
      }
      if (other.OutputScale != 0F) {
        OutputScale = other.OutputScale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            InputMaxValue = input.ReadFloat();
            break;
          }
          case 21: {
            OutputScale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Eye gaze control
  /// </summary>
  public sealed partial class LookAt : pb::IMessage<LookAt> {
    private static readonly pb::MessageParser<LookAt> _parser = new pb::MessageParser<LookAt>(() => new LookAt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LookAt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.LookAtReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookAt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookAt(LookAt other) : this() {
      offsetFromHeadBone_ = other.offsetFromHeadBone_.Clone();
      lookAtType_ = other.lookAtType_;
      lookAtHorizontalInner_ = other.lookAtHorizontalInner_ != null ? other.lookAtHorizontalInner_.Clone() : null;
      lookAtHorizontalOuter_ = other.lookAtHorizontalOuter_ != null ? other.lookAtHorizontalOuter_.Clone() : null;
      lookAtVerticalDown_ = other.lookAtVerticalDown_ != null ? other.lookAtVerticalDown_.Clone() : null;
      lookAtVerticalUp_ = other.lookAtVerticalUp_ != null ? other.lookAtVerticalUp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LookAt Clone() {
      return new LookAt(this);
    }

    /// <summary>Field number for the "offsetFromHeadBone" field.</summary>
    public const int OffsetFromHeadBoneFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_offsetFromHeadBone_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> offsetFromHeadBone_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// The origin of LookAt. Position offset from the head bone
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> OffsetFromHeadBone {
      get { return offsetFromHeadBone_; }
    }

    /// <summary>Field number for the "lookAtType" field.</summary>
    public const int LookAtTypeFieldNumber = 2;
    private global::VrmProtobuf.LookAt.Types.LookAtType lookAtType_ = global::VrmProtobuf.LookAt.Types.LookAtType.Bone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.LookAt.Types.LookAtType LookAtType {
      get { return lookAtType_; }
      set {
        lookAtType_ = value;
      }
    }

    /// <summary>Field number for the "lookAtHorizontalInner" field.</summary>
    public const int LookAtHorizontalInnerFieldNumber = 3;
    private global::VrmProtobuf.LookAtRangeMap lookAtHorizontalInner_;
    /// <summary>
    /// Horizontal inward movement. The left eye moves right. The right eye moves left.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.LookAtRangeMap LookAtHorizontalInner {
      get { return lookAtHorizontalInner_; }
      set {
        lookAtHorizontalInner_ = value;
      }
    }

    /// <summary>Field number for the "lookAtHorizontalOuter" field.</summary>
    public const int LookAtHorizontalOuterFieldNumber = 4;
    private global::VrmProtobuf.LookAtRangeMap lookAtHorizontalOuter_;
    /// <summary>
    /// Horizontal outward movement. The left eye moves left. The right eye moves right.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.LookAtRangeMap LookAtHorizontalOuter {
      get { return lookAtHorizontalOuter_; }
      set {
        lookAtHorizontalOuter_ = value;
      }
    }

    /// <summary>Field number for the "lookAtVerticalDown" field.</summary>
    public const int LookAtVerticalDownFieldNumber = 5;
    private global::VrmProtobuf.LookAtRangeMap lookAtVerticalDown_;
    /// <summary>
    /// Vertical downward movement. Both eyes move upwards 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.LookAtRangeMap LookAtVerticalDown {
      get { return lookAtVerticalDown_; }
      set {
        lookAtVerticalDown_ = value;
      }
    }

    /// <summary>Field number for the "lookAtVerticalUp" field.</summary>
    public const int LookAtVerticalUpFieldNumber = 6;
    private global::VrmProtobuf.LookAtRangeMap lookAtVerticalUp_;
    /// <summary>
    /// Vertical upward movement. Both eyes move downwards
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.LookAtRangeMap LookAtVerticalUp {
      get { return lookAtVerticalUp_; }
      set {
        lookAtVerticalUp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LookAt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LookAt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!offsetFromHeadBone_.Equals(other.offsetFromHeadBone_)) return false;
      if (LookAtType != other.LookAtType) return false;
      if (!object.Equals(LookAtHorizontalInner, other.LookAtHorizontalInner)) return false;
      if (!object.Equals(LookAtHorizontalOuter, other.LookAtHorizontalOuter)) return false;
      if (!object.Equals(LookAtVerticalDown, other.LookAtVerticalDown)) return false;
      if (!object.Equals(LookAtVerticalUp, other.LookAtVerticalUp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= offsetFromHeadBone_.GetHashCode();
      if (LookAtType != global::VrmProtobuf.LookAt.Types.LookAtType.Bone) hash ^= LookAtType.GetHashCode();
      if (lookAtHorizontalInner_ != null) hash ^= LookAtHorizontalInner.GetHashCode();
      if (lookAtHorizontalOuter_ != null) hash ^= LookAtHorizontalOuter.GetHashCode();
      if (lookAtVerticalDown_ != null) hash ^= LookAtVerticalDown.GetHashCode();
      if (lookAtVerticalUp_ != null) hash ^= LookAtVerticalUp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      offsetFromHeadBone_.WriteTo(output, _repeated_offsetFromHeadBone_codec);
      if (LookAtType != global::VrmProtobuf.LookAt.Types.LookAtType.Bone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LookAtType);
      }
      if (lookAtHorizontalInner_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LookAtHorizontalInner);
      }
      if (lookAtHorizontalOuter_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LookAtHorizontalOuter);
      }
      if (lookAtVerticalDown_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LookAtVerticalDown);
      }
      if (lookAtVerticalUp_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LookAtVerticalUp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += offsetFromHeadBone_.CalculateSize(_repeated_offsetFromHeadBone_codec);
      if (LookAtType != global::VrmProtobuf.LookAt.Types.LookAtType.Bone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LookAtType);
      }
      if (lookAtHorizontalInner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LookAtHorizontalInner);
      }
      if (lookAtHorizontalOuter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LookAtHorizontalOuter);
      }
      if (lookAtVerticalDown_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LookAtVerticalDown);
      }
      if (lookAtVerticalUp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LookAtVerticalUp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LookAt other) {
      if (other == null) {
        return;
      }
      offsetFromHeadBone_.Add(other.offsetFromHeadBone_);
      if (other.LookAtType != global::VrmProtobuf.LookAt.Types.LookAtType.Bone) {
        LookAtType = other.LookAtType;
      }
      if (other.lookAtHorizontalInner_ != null) {
        if (lookAtHorizontalInner_ == null) {
          LookAtHorizontalInner = new global::VrmProtobuf.LookAtRangeMap();
        }
        LookAtHorizontalInner.MergeFrom(other.LookAtHorizontalInner);
      }
      if (other.lookAtHorizontalOuter_ != null) {
        if (lookAtHorizontalOuter_ == null) {
          LookAtHorizontalOuter = new global::VrmProtobuf.LookAtRangeMap();
        }
        LookAtHorizontalOuter.MergeFrom(other.LookAtHorizontalOuter);
      }
      if (other.lookAtVerticalDown_ != null) {
        if (lookAtVerticalDown_ == null) {
          LookAtVerticalDown = new global::VrmProtobuf.LookAtRangeMap();
        }
        LookAtVerticalDown.MergeFrom(other.LookAtVerticalDown);
      }
      if (other.lookAtVerticalUp_ != null) {
        if (lookAtVerticalUp_ == null) {
          LookAtVerticalUp = new global::VrmProtobuf.LookAtRangeMap();
        }
        LookAtVerticalUp.MergeFrom(other.LookAtVerticalUp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            offsetFromHeadBone_.AddEntriesFrom(input, _repeated_offsetFromHeadBone_codec);
            break;
          }
          case 16: {
            LookAtType = (global::VrmProtobuf.LookAt.Types.LookAtType) input.ReadEnum();
            break;
          }
          case 26: {
            if (lookAtHorizontalInner_ == null) {
              LookAtHorizontalInner = new global::VrmProtobuf.LookAtRangeMap();
            }
            input.ReadMessage(LookAtHorizontalInner);
            break;
          }
          case 34: {
            if (lookAtHorizontalOuter_ == null) {
              LookAtHorizontalOuter = new global::VrmProtobuf.LookAtRangeMap();
            }
            input.ReadMessage(LookAtHorizontalOuter);
            break;
          }
          case 42: {
            if (lookAtVerticalDown_ == null) {
              LookAtVerticalDown = new global::VrmProtobuf.LookAtRangeMap();
            }
            input.ReadMessage(LookAtVerticalDown);
            break;
          }
          case 50: {
            if (lookAtVerticalUp_ == null) {
              LookAtVerticalUp = new global::VrmProtobuf.LookAtRangeMap();
            }
            input.ReadMessage(LookAtVerticalUp);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LookAt message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LookAtType {
        [pbr::OriginalName("bone")] Bone = 0,
        [pbr::OriginalName("blendShape")] BlendShape = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: VRMC_materials_mtoon.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VrmProtobuf {

  /// <summary>Holder for reflection information generated from VRMC_materials_mtoon.proto</summary>
  public static partial class VRMCMaterialsMtoonReflection {

    #region Descriptor
    /// <summary>File descriptor for VRMC_materials_mtoon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VRMCMaterialsMtoonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpWUk1DX21hdGVyaWFsc19tdG9vbi5wcm90bxILVnJtUHJvdG9idWYaHmdv",
            "b2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byLMDQoUVlJNQ19tYXRlcmlh",
            "bHNfbXRvb24SDwoHdmVyc2lvbhgCIAEoCRJACgpyZW5kZXJNb2RlGAMgASgO",
            "MiwuVnJtUHJvdG9idWYuVlJNQ19tYXRlcmlhbHNfbXRvb24uUmVuZGVyTW9k",
            "ZRI8CghjdWxsTW9kZRgEIAEoDjIqLlZybVByb3RvYnVmLlZSTUNfbWF0ZXJp",
            "YWxzX210b29uLkN1bGxNb2RlEh8KF3JlbmRlclF1ZXVlT2Zmc2V0TnVtYmVy",
            "GAUgASgFEhEKCWxpdEZhY3RvchgGIAMoAhI3ChJsaXRNdWx0aXBseVRleHR1",
            "cmUYByABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRITCgtzaGFk",
            "ZUZhY3RvchgIIAMoAhI5ChRzaGFkZU11bHRpcGx5VGV4dHVyZRgJIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEh0KFWN1dG91dFRocmVzaG9s",
            "ZEZhY3RvchgKIAEoAhIaChJzaGFkaW5nU2hpZnRGYWN0b3IYCyABKAISGgoS",
            "c2hhZGluZ1Rvb255RmFjdG9yGAwgASgCEiMKG2xpZ2h0Q29sb3JBdHRlbnVh",
            "dGlvbkZhY3RvchgSIAEoAhIZChFnaUludGVuc2l0eUZhY3RvchgTIAEoAhIy",
            "Cg1ub3JtYWxUZXh0dXJlGBQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMy",
            "VmFsdWUSGQoRbm9ybWFsU2NhbGVGYWN0b3IYFSABKAISFgoOZW1pc3Npb25G",
            "YWN0b3IYFiADKAISPAoXZW1pc3Npb25NdWx0aXBseVRleHR1cmUYFyABKAsy",
            "Gy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRI0Cg9hZGRpdGl2ZVRleHR1",
            "cmUYGCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRIRCglyaW1G",
            "YWN0b3IYGSADKAISNwoScmltTXVsdGlwbHlUZXh0dXJlGBogASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDMyVmFsdWUSHAoUcmltTGlnaHRpbmdNaXhGYWN0",
            "b3IYGyABKAISHQoVcmltRnJlc25lbFBvd2VyRmFjdG9yGBwgASgCEhUKDXJp",
            "bUxpZnRGYWN0b3IYHSABKAISTAoQb3V0bGluZVdpZHRoTW9kZRgeIAEoDjIy",
            "LlZybVByb3RvYnVmLlZSTUNfbWF0ZXJpYWxzX210b29uLk91dGxpbmVXaWR0",
            "aE1vZGUSGgoSb3V0bGluZVdpZHRoRmFjdG9yGB8gASgCEkAKG291dGxpbmVX",
            "aWR0aE11bHRpcGx5VGV4dHVyZRggIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5J",
            "bnQzMlZhbHVlEiYKHm91dGxpbmVTY2FsZWRNYXhEaXN0YW5jZUZhY3Rvchgh",
            "IAEoAhJMChBvdXRsaW5lQ29sb3JNb2RlGCIgASgOMjIuVnJtUHJvdG9idWYu",
            "VlJNQ19tYXRlcmlhbHNfbXRvb24uT3V0bGluZUNvbG9yTW9kZRIVCg1vdXRs",
            "aW5lRmFjdG9yGCMgAygCEiAKGG91dGxpbmVMaWdodGluZ01peEZhY3Rvchgk",
            "IAEoAhIoCiBtYWluVGV4dHVyZUxlZnRCb3R0b21PcmlnaW5TY2FsZRglIAMo",
            "AhIpCiFtYWluVGV4dHVyZUxlZnRCb3R0b21PcmlnaW5PZmZzZXQYJiADKAIS",
            "OwoWdXZBbmltYXRpb25NYXNrVGV4dHVyZRgnIAEoCzIbLmdvb2dsZS5wcm90",
            "b2J1Zi5JbnQzMlZhbHVlEiUKHXV2QW5pbWF0aW9uU2Nyb2xsWFNwZWVkRmFj",
            "dG9yGCggASgCEiUKHXV2QW5pbWF0aW9uU2Nyb2xsWVNwZWVkRmFjdG9yGCkg",
            "ASgCEiYKHnV2QW5pbWF0aW9uUm90YXRpb25TcGVlZEZhY3RvchgqIAEoAiJQ",
            "CgpSZW5kZXJNb2RlEgoKBm9wYXF1ZRAAEgoKBmN1dG91dBABEg8KC3RyYW5z",
            "cGFyZW50EAISGQoVdHJhbnNwYXJlbnRXaXRoWldyaXRlEAMiHQoIQ3VsbE1v",
            "ZGUSBwoDb2ZmEAASCAoEYmFjaxABIkkKEE91dGxpbmVXaWR0aE1vZGUSCAoE",
            "bm9uZRAAEhQKEHdvcmxkQ29vcmRpbmF0ZXMQARIVChFzY3JlZW5Db29yZGlu",
            "YXRlcxACIjUKEE91dGxpbmVDb2xvck1vZGUSDgoKZml4ZWRDb2xvchAAEhEK",
            "DW1peGVkTGlnaHRpbmcQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VrmProtobuf.VRMC_materials_mtoon), global::VrmProtobuf.VRMC_materials_mtoon.Parser, new[]{ "Version", "RenderMode", "CullMode", "RenderQueueOffsetNumber", "LitFactor", "LitMultiplyTexture", "ShadeFactor", "ShadeMultiplyTexture", "CutoutThresholdFactor", "ShadingShiftFactor", "ShadingToonyFactor", "LightColorAttenuationFactor", "GiIntensityFactor", "NormalTexture", "NormalScaleFactor", "EmissionFactor", "EmissionMultiplyTexture", "AdditiveTexture", "RimFactor", "RimMultiplyTexture", "RimLightingMixFactor", "RimFresnelPowerFactor", "RimLiftFactor", "OutlineWidthMode", "OutlineWidthFactor", "OutlineWidthMultiplyTexture", "OutlineScaledMaxDistanceFactor", "OutlineColorMode", "OutlineFactor", "OutlineLightingMixFactor", "MainTextureLeftBottomOriginScale", "MainTextureLeftBottomOriginOffset", "UvAnimationMaskTexture", "UvAnimationScrollXSpeedFactor", "UvAnimationScrollYSpeedFactor", "UvAnimationRotationSpeedFactor" }, null, new[]{ typeof(global::VrmProtobuf.VRMC_materials_mtoon.Types.RenderMode), typeof(global::VrmProtobuf.VRMC_materials_mtoon.Types.CullMode), typeof(global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode), typeof(global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VRMC_materials_mtoon : pb::IMessage<VRMC_materials_mtoon> {
    private static readonly pb::MessageParser<VRMC_materials_mtoon> _parser = new pb::MessageParser<VRMC_materials_mtoon>(() => new VRMC_materials_mtoon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VRMC_materials_mtoon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VrmProtobuf.VRMCMaterialsMtoonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRMC_materials_mtoon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRMC_materials_mtoon(VRMC_materials_mtoon other) : this() {
      version_ = other.version_;
      renderMode_ = other.renderMode_;
      cullMode_ = other.cullMode_;
      renderQueueOffsetNumber_ = other.renderQueueOffsetNumber_;
      litFactor_ = other.litFactor_.Clone();
      LitMultiplyTexture = other.LitMultiplyTexture;
      shadeFactor_ = other.shadeFactor_.Clone();
      ShadeMultiplyTexture = other.ShadeMultiplyTexture;
      cutoutThresholdFactor_ = other.cutoutThresholdFactor_;
      shadingShiftFactor_ = other.shadingShiftFactor_;
      shadingToonyFactor_ = other.shadingToonyFactor_;
      lightColorAttenuationFactor_ = other.lightColorAttenuationFactor_;
      giIntensityFactor_ = other.giIntensityFactor_;
      NormalTexture = other.NormalTexture;
      normalScaleFactor_ = other.normalScaleFactor_;
      emissionFactor_ = other.emissionFactor_.Clone();
      EmissionMultiplyTexture = other.EmissionMultiplyTexture;
      AdditiveTexture = other.AdditiveTexture;
      rimFactor_ = other.rimFactor_.Clone();
      RimMultiplyTexture = other.RimMultiplyTexture;
      rimLightingMixFactor_ = other.rimLightingMixFactor_;
      rimFresnelPowerFactor_ = other.rimFresnelPowerFactor_;
      rimLiftFactor_ = other.rimLiftFactor_;
      outlineWidthMode_ = other.outlineWidthMode_;
      outlineWidthFactor_ = other.outlineWidthFactor_;
      OutlineWidthMultiplyTexture = other.OutlineWidthMultiplyTexture;
      outlineScaledMaxDistanceFactor_ = other.outlineScaledMaxDistanceFactor_;
      outlineColorMode_ = other.outlineColorMode_;
      outlineFactor_ = other.outlineFactor_.Clone();
      outlineLightingMixFactor_ = other.outlineLightingMixFactor_;
      mainTextureLeftBottomOriginScale_ = other.mainTextureLeftBottomOriginScale_.Clone();
      mainTextureLeftBottomOriginOffset_ = other.mainTextureLeftBottomOriginOffset_.Clone();
      UvAnimationMaskTexture = other.UvAnimationMaskTexture;
      uvAnimationScrollXSpeedFactor_ = other.uvAnimationScrollXSpeedFactor_;
      uvAnimationScrollYSpeedFactor_ = other.uvAnimationScrollYSpeedFactor_;
      uvAnimationRotationSpeedFactor_ = other.uvAnimationRotationSpeedFactor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VRMC_materials_mtoon Clone() {
      return new VRMC_materials_mtoon(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    /// <summary>
    /// Meta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "renderMode" field.</summary>
    public const int RenderModeFieldNumber = 3;
    private global::VrmProtobuf.VRMC_materials_mtoon.Types.RenderMode renderMode_ = global::VrmProtobuf.VRMC_materials_mtoon.Types.RenderMode.Opaque;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.VRMC_materials_mtoon.Types.RenderMode RenderMode {
      get { return renderMode_; }
      set {
        renderMode_ = value;
      }
    }

    /// <summary>Field number for the "cullMode" field.</summary>
    public const int CullModeFieldNumber = 4;
    private global::VrmProtobuf.VRMC_materials_mtoon.Types.CullMode cullMode_ = global::VrmProtobuf.VRMC_materials_mtoon.Types.CullMode.Off;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.VRMC_materials_mtoon.Types.CullMode CullMode {
      get { return cullMode_; }
      set {
        cullMode_ = value;
      }
    }

    /// <summary>Field number for the "renderQueueOffsetNumber" field.</summary>
    public const int RenderQueueOffsetNumberFieldNumber = 5;
    private int renderQueueOffsetNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RenderQueueOffsetNumber {
      get { return renderQueueOffsetNumber_; }
      set {
        renderQueueOffsetNumber_ = value;
      }
    }

    /// <summary>Field number for the "litFactor" field.</summary>
    public const int LitFactorFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_litFactor_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> litFactor_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Color
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LitFactor {
      get { return litFactor_; }
    }

    /// <summary>Field number for the "litMultiplyTexture" field.</summary>
    public const int LitMultiplyTextureFieldNumber = 7;
    private static readonly pb::FieldCodec<int?> _single_litMultiplyTexture_codec = pb::FieldCodec.ForStructWrapper<int>(58);
    private int? litMultiplyTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? LitMultiplyTexture {
      get { return litMultiplyTexture_; }
      set {
        litMultiplyTexture_ = value;
      }
    }


    /// <summary>Field number for the "shadeFactor" field.</summary>
    public const int ShadeFactorFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_shadeFactor_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> shadeFactor_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ShadeFactor {
      get { return shadeFactor_; }
    }

    /// <summary>Field number for the "shadeMultiplyTexture" field.</summary>
    public const int ShadeMultiplyTextureFieldNumber = 9;
    private static readonly pb::FieldCodec<int?> _single_shadeMultiplyTexture_codec = pb::FieldCodec.ForStructWrapper<int>(74);
    private int? shadeMultiplyTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? ShadeMultiplyTexture {
      get { return shadeMultiplyTexture_; }
      set {
        shadeMultiplyTexture_ = value;
      }
    }


    /// <summary>Field number for the "cutoutThresholdFactor" field.</summary>
    public const int CutoutThresholdFactorFieldNumber = 10;
    private float cutoutThresholdFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CutoutThresholdFactor {
      get { return cutoutThresholdFactor_; }
      set {
        cutoutThresholdFactor_ = value;
      }
    }

    /// <summary>Field number for the "shadingShiftFactor" field.</summary>
    public const int ShadingShiftFactorFieldNumber = 11;
    private float shadingShiftFactor_;
    /// <summary>
    /// Lighting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShadingShiftFactor {
      get { return shadingShiftFactor_; }
      set {
        shadingShiftFactor_ = value;
      }
    }

    /// <summary>Field number for the "shadingToonyFactor" field.</summary>
    public const int ShadingToonyFactorFieldNumber = 12;
    private float shadingToonyFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShadingToonyFactor {
      get { return shadingToonyFactor_; }
      set {
        shadingToonyFactor_ = value;
      }
    }

    /// <summary>Field number for the "lightColorAttenuationFactor" field.</summary>
    public const int LightColorAttenuationFactorFieldNumber = 18;
    private float lightColorAttenuationFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LightColorAttenuationFactor {
      get { return lightColorAttenuationFactor_; }
      set {
        lightColorAttenuationFactor_ = value;
      }
    }

    /// <summary>Field number for the "giIntensityFactor" field.</summary>
    public const int GiIntensityFactorFieldNumber = 19;
    private float giIntensityFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GiIntensityFactor {
      get { return giIntensityFactor_; }
      set {
        giIntensityFactor_ = value;
      }
    }

    /// <summary>Field number for the "normalTexture" field.</summary>
    public const int NormalTextureFieldNumber = 20;
    private static readonly pb::FieldCodec<int?> _single_normalTexture_codec = pb::FieldCodec.ForStructWrapper<int>(162);
    private int? normalTexture_;
    /// <summary>
    /// Normal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? NormalTexture {
      get { return normalTexture_; }
      set {
        normalTexture_ = value;
      }
    }


    /// <summary>Field number for the "normalScaleFactor" field.</summary>
    public const int NormalScaleFactorFieldNumber = 21;
    private float normalScaleFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NormalScaleFactor {
      get { return normalScaleFactor_; }
      set {
        normalScaleFactor_ = value;
      }
    }

    /// <summary>Field number for the "emissionFactor" field.</summary>
    public const int EmissionFactorFieldNumber = 22;
    private static readonly pb::FieldCodec<float> _repeated_emissionFactor_codec
        = pb::FieldCodec.ForFloat(178);
    private readonly pbc::RepeatedField<float> emissionFactor_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Emission
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> EmissionFactor {
      get { return emissionFactor_; }
    }

    /// <summary>Field number for the "emissionMultiplyTexture" field.</summary>
    public const int EmissionMultiplyTextureFieldNumber = 23;
    private static readonly pb::FieldCodec<int?> _single_emissionMultiplyTexture_codec = pb::FieldCodec.ForStructWrapper<int>(186);
    private int? emissionMultiplyTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? EmissionMultiplyTexture {
      get { return emissionMultiplyTexture_; }
      set {
        emissionMultiplyTexture_ = value;
      }
    }


    /// <summary>Field number for the "additiveTexture" field.</summary>
    public const int AdditiveTextureFieldNumber = 24;
    private static readonly pb::FieldCodec<int?> _single_additiveTexture_codec = pb::FieldCodec.ForStructWrapper<int>(194);
    private int? additiveTexture_;
    /// <summary>
    /// MatCap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? AdditiveTexture {
      get { return additiveTexture_; }
      set {
        additiveTexture_ = value;
      }
    }


    /// <summary>Field number for the "rimFactor" field.</summary>
    public const int RimFactorFieldNumber = 25;
    private static readonly pb::FieldCodec<float> _repeated_rimFactor_codec
        = pb::FieldCodec.ForFloat(202);
    private readonly pbc::RepeatedField<float> rimFactor_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Rim
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RimFactor {
      get { return rimFactor_; }
    }

    /// <summary>Field number for the "rimMultiplyTexture" field.</summary>
    public const int RimMultiplyTextureFieldNumber = 26;
    private static readonly pb::FieldCodec<int?> _single_rimMultiplyTexture_codec = pb::FieldCodec.ForStructWrapper<int>(210);
    private int? rimMultiplyTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? RimMultiplyTexture {
      get { return rimMultiplyTexture_; }
      set {
        rimMultiplyTexture_ = value;
      }
    }


    /// <summary>Field number for the "rimLightingMixFactor" field.</summary>
    public const int RimLightingMixFactorFieldNumber = 27;
    private float rimLightingMixFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RimLightingMixFactor {
      get { return rimLightingMixFactor_; }
      set {
        rimLightingMixFactor_ = value;
      }
    }

    /// <summary>Field number for the "rimFresnelPowerFactor" field.</summary>
    public const int RimFresnelPowerFactorFieldNumber = 28;
    private float rimFresnelPowerFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RimFresnelPowerFactor {
      get { return rimFresnelPowerFactor_; }
      set {
        rimFresnelPowerFactor_ = value;
      }
    }

    /// <summary>Field number for the "rimLiftFactor" field.</summary>
    public const int RimLiftFactorFieldNumber = 29;
    private float rimLiftFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RimLiftFactor {
      get { return rimLiftFactor_; }
      set {
        rimLiftFactor_ = value;
      }
    }

    /// <summary>Field number for the "outlineWidthMode" field.</summary>
    public const int OutlineWidthModeFieldNumber = 30;
    private global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode outlineWidthMode_ = global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode OutlineWidthMode {
      get { return outlineWidthMode_; }
      set {
        outlineWidthMode_ = value;
      }
    }

    /// <summary>Field number for the "outlineWidthFactor" field.</summary>
    public const int OutlineWidthFactorFieldNumber = 31;
    private float outlineWidthFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutlineWidthFactor {
      get { return outlineWidthFactor_; }
      set {
        outlineWidthFactor_ = value;
      }
    }

    /// <summary>Field number for the "outlineWidthMultiplyTexture" field.</summary>
    public const int OutlineWidthMultiplyTextureFieldNumber = 32;
    private static readonly pb::FieldCodec<int?> _single_outlineWidthMultiplyTexture_codec = pb::FieldCodec.ForStructWrapper<int>(258);
    private int? outlineWidthMultiplyTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? OutlineWidthMultiplyTexture {
      get { return outlineWidthMultiplyTexture_; }
      set {
        outlineWidthMultiplyTexture_ = value;
      }
    }


    /// <summary>Field number for the "outlineScaledMaxDistanceFactor" field.</summary>
    public const int OutlineScaledMaxDistanceFactorFieldNumber = 33;
    private float outlineScaledMaxDistanceFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutlineScaledMaxDistanceFactor {
      get { return outlineScaledMaxDistanceFactor_; }
      set {
        outlineScaledMaxDistanceFactor_ = value;
      }
    }

    /// <summary>Field number for the "outlineColorMode" field.</summary>
    public const int OutlineColorModeFieldNumber = 34;
    private global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode outlineColorMode_ = global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode.FixedColor;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode OutlineColorMode {
      get { return outlineColorMode_; }
      set {
        outlineColorMode_ = value;
      }
    }

    /// <summary>Field number for the "outlineFactor" field.</summary>
    public const int OutlineFactorFieldNumber = 35;
    private static readonly pb::FieldCodec<float> _repeated_outlineFactor_codec
        = pb::FieldCodec.ForFloat(282);
    private readonly pbc::RepeatedField<float> outlineFactor_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> OutlineFactor {
      get { return outlineFactor_; }
    }

    /// <summary>Field number for the "outlineLightingMixFactor" field.</summary>
    public const int OutlineLightingMixFactorFieldNumber = 36;
    private float outlineLightingMixFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutlineLightingMixFactor {
      get { return outlineLightingMixFactor_; }
      set {
        outlineLightingMixFactor_ = value;
      }
    }

    /// <summary>Field number for the "mainTextureLeftBottomOriginScale" field.</summary>
    public const int MainTextureLeftBottomOriginScaleFieldNumber = 37;
    private static readonly pb::FieldCodec<float> _repeated_mainTextureLeftBottomOriginScale_codec
        = pb::FieldCodec.ForFloat(298);
    private readonly pbc::RepeatedField<float> mainTextureLeftBottomOriginScale_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// TextureUvCoords
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MainTextureLeftBottomOriginScale {
      get { return mainTextureLeftBottomOriginScale_; }
    }

    /// <summary>Field number for the "mainTextureLeftBottomOriginOffset" field.</summary>
    public const int MainTextureLeftBottomOriginOffsetFieldNumber = 38;
    private static readonly pb::FieldCodec<float> _repeated_mainTextureLeftBottomOriginOffset_codec
        = pb::FieldCodec.ForFloat(306);
    private readonly pbc::RepeatedField<float> mainTextureLeftBottomOriginOffset_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MainTextureLeftBottomOriginOffset {
      get { return mainTextureLeftBottomOriginOffset_; }
    }

    /// <summary>Field number for the "uvAnimationMaskTexture" field.</summary>
    public const int UvAnimationMaskTextureFieldNumber = 39;
    private static readonly pb::FieldCodec<int?> _single_uvAnimationMaskTexture_codec = pb::FieldCodec.ForStructWrapper<int>(314);
    private int? uvAnimationMaskTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? UvAnimationMaskTexture {
      get { return uvAnimationMaskTexture_; }
      set {
        uvAnimationMaskTexture_ = value;
      }
    }


    /// <summary>Field number for the "uvAnimationScrollXSpeedFactor" field.</summary>
    public const int UvAnimationScrollXSpeedFactorFieldNumber = 40;
    private float uvAnimationScrollXSpeedFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UvAnimationScrollXSpeedFactor {
      get { return uvAnimationScrollXSpeedFactor_; }
      set {
        uvAnimationScrollXSpeedFactor_ = value;
      }
    }

    /// <summary>Field number for the "uvAnimationScrollYSpeedFactor" field.</summary>
    public const int UvAnimationScrollYSpeedFactorFieldNumber = 41;
    private float uvAnimationScrollYSpeedFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UvAnimationScrollYSpeedFactor {
      get { return uvAnimationScrollYSpeedFactor_; }
      set {
        uvAnimationScrollYSpeedFactor_ = value;
      }
    }

    /// <summary>Field number for the "uvAnimationRotationSpeedFactor" field.</summary>
    public const int UvAnimationRotationSpeedFactorFieldNumber = 42;
    private float uvAnimationRotationSpeedFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UvAnimationRotationSpeedFactor {
      get { return uvAnimationRotationSpeedFactor_; }
      set {
        uvAnimationRotationSpeedFactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VRMC_materials_mtoon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VRMC_materials_mtoon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (RenderMode != other.RenderMode) return false;
      if (CullMode != other.CullMode) return false;
      if (RenderQueueOffsetNumber != other.RenderQueueOffsetNumber) return false;
      if(!litFactor_.Equals(other.litFactor_)) return false;
      if (LitMultiplyTexture != other.LitMultiplyTexture) return false;
      if(!shadeFactor_.Equals(other.shadeFactor_)) return false;
      if (ShadeMultiplyTexture != other.ShadeMultiplyTexture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CutoutThresholdFactor, other.CutoutThresholdFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShadingShiftFactor, other.ShadingShiftFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShadingToonyFactor, other.ShadingToonyFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LightColorAttenuationFactor, other.LightColorAttenuationFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GiIntensityFactor, other.GiIntensityFactor)) return false;
      if (NormalTexture != other.NormalTexture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NormalScaleFactor, other.NormalScaleFactor)) return false;
      if(!emissionFactor_.Equals(other.emissionFactor_)) return false;
      if (EmissionMultiplyTexture != other.EmissionMultiplyTexture) return false;
      if (AdditiveTexture != other.AdditiveTexture) return false;
      if(!rimFactor_.Equals(other.rimFactor_)) return false;
      if (RimMultiplyTexture != other.RimMultiplyTexture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RimLightingMixFactor, other.RimLightingMixFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RimFresnelPowerFactor, other.RimFresnelPowerFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RimLiftFactor, other.RimLiftFactor)) return false;
      if (OutlineWidthMode != other.OutlineWidthMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OutlineWidthFactor, other.OutlineWidthFactor)) return false;
      if (OutlineWidthMultiplyTexture != other.OutlineWidthMultiplyTexture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OutlineScaledMaxDistanceFactor, other.OutlineScaledMaxDistanceFactor)) return false;
      if (OutlineColorMode != other.OutlineColorMode) return false;
      if(!outlineFactor_.Equals(other.outlineFactor_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OutlineLightingMixFactor, other.OutlineLightingMixFactor)) return false;
      if(!mainTextureLeftBottomOriginScale_.Equals(other.mainTextureLeftBottomOriginScale_)) return false;
      if(!mainTextureLeftBottomOriginOffset_.Equals(other.mainTextureLeftBottomOriginOffset_)) return false;
      if (UvAnimationMaskTexture != other.UvAnimationMaskTexture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UvAnimationScrollXSpeedFactor, other.UvAnimationScrollXSpeedFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UvAnimationScrollYSpeedFactor, other.UvAnimationScrollYSpeedFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UvAnimationRotationSpeedFactor, other.UvAnimationRotationSpeedFactor)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (RenderMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.RenderMode.Opaque) hash ^= RenderMode.GetHashCode();
      if (CullMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.CullMode.Off) hash ^= CullMode.GetHashCode();
      if (RenderQueueOffsetNumber != 0) hash ^= RenderQueueOffsetNumber.GetHashCode();
      hash ^= litFactor_.GetHashCode();
      if (litMultiplyTexture_ != null) hash ^= LitMultiplyTexture.GetHashCode();
      hash ^= shadeFactor_.GetHashCode();
      if (shadeMultiplyTexture_ != null) hash ^= ShadeMultiplyTexture.GetHashCode();
      if (CutoutThresholdFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CutoutThresholdFactor);
      if (ShadingShiftFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShadingShiftFactor);
      if (ShadingToonyFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShadingToonyFactor);
      if (LightColorAttenuationFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LightColorAttenuationFactor);
      if (GiIntensityFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GiIntensityFactor);
      if (normalTexture_ != null) hash ^= NormalTexture.GetHashCode();
      if (NormalScaleFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NormalScaleFactor);
      hash ^= emissionFactor_.GetHashCode();
      if (emissionMultiplyTexture_ != null) hash ^= EmissionMultiplyTexture.GetHashCode();
      if (additiveTexture_ != null) hash ^= AdditiveTexture.GetHashCode();
      hash ^= rimFactor_.GetHashCode();
      if (rimMultiplyTexture_ != null) hash ^= RimMultiplyTexture.GetHashCode();
      if (RimLightingMixFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RimLightingMixFactor);
      if (RimFresnelPowerFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RimFresnelPowerFactor);
      if (RimLiftFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RimLiftFactor);
      if (OutlineWidthMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode.None) hash ^= OutlineWidthMode.GetHashCode();
      if (OutlineWidthFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OutlineWidthFactor);
      if (outlineWidthMultiplyTexture_ != null) hash ^= OutlineWidthMultiplyTexture.GetHashCode();
      if (OutlineScaledMaxDistanceFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OutlineScaledMaxDistanceFactor);
      if (OutlineColorMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode.FixedColor) hash ^= OutlineColorMode.GetHashCode();
      hash ^= outlineFactor_.GetHashCode();
      if (OutlineLightingMixFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OutlineLightingMixFactor);
      hash ^= mainTextureLeftBottomOriginScale_.GetHashCode();
      hash ^= mainTextureLeftBottomOriginOffset_.GetHashCode();
      if (uvAnimationMaskTexture_ != null) hash ^= UvAnimationMaskTexture.GetHashCode();
      if (UvAnimationScrollXSpeedFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UvAnimationScrollXSpeedFactor);
      if (UvAnimationScrollYSpeedFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UvAnimationScrollYSpeedFactor);
      if (UvAnimationRotationSpeedFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UvAnimationRotationSpeedFactor);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (RenderMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.RenderMode.Opaque) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RenderMode);
      }
      if (CullMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.CullMode.Off) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CullMode);
      }
      if (RenderQueueOffsetNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RenderQueueOffsetNumber);
      }
      litFactor_.WriteTo(output, _repeated_litFactor_codec);
      if (litMultiplyTexture_ != null) {
        _single_litMultiplyTexture_codec.WriteTagAndValue(output, LitMultiplyTexture);
      }
      shadeFactor_.WriteTo(output, _repeated_shadeFactor_codec);
      if (shadeMultiplyTexture_ != null) {
        _single_shadeMultiplyTexture_codec.WriteTagAndValue(output, ShadeMultiplyTexture);
      }
      if (CutoutThresholdFactor != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(CutoutThresholdFactor);
      }
      if (ShadingShiftFactor != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ShadingShiftFactor);
      }
      if (ShadingToonyFactor != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(ShadingToonyFactor);
      }
      if (LightColorAttenuationFactor != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(LightColorAttenuationFactor);
      }
      if (GiIntensityFactor != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(GiIntensityFactor);
      }
      if (normalTexture_ != null) {
        _single_normalTexture_codec.WriteTagAndValue(output, NormalTexture);
      }
      if (NormalScaleFactor != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(NormalScaleFactor);
      }
      emissionFactor_.WriteTo(output, _repeated_emissionFactor_codec);
      if (emissionMultiplyTexture_ != null) {
        _single_emissionMultiplyTexture_codec.WriteTagAndValue(output, EmissionMultiplyTexture);
      }
      if (additiveTexture_ != null) {
        _single_additiveTexture_codec.WriteTagAndValue(output, AdditiveTexture);
      }
      rimFactor_.WriteTo(output, _repeated_rimFactor_codec);
      if (rimMultiplyTexture_ != null) {
        _single_rimMultiplyTexture_codec.WriteTagAndValue(output, RimMultiplyTexture);
      }
      if (RimLightingMixFactor != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(RimLightingMixFactor);
      }
      if (RimFresnelPowerFactor != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(RimFresnelPowerFactor);
      }
      if (RimLiftFactor != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(RimLiftFactor);
      }
      if (OutlineWidthMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode.None) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) OutlineWidthMode);
      }
      if (OutlineWidthFactor != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(OutlineWidthFactor);
      }
      if (outlineWidthMultiplyTexture_ != null) {
        _single_outlineWidthMultiplyTexture_codec.WriteTagAndValue(output, OutlineWidthMultiplyTexture);
      }
      if (OutlineScaledMaxDistanceFactor != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(OutlineScaledMaxDistanceFactor);
      }
      if (OutlineColorMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode.FixedColor) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) OutlineColorMode);
      }
      outlineFactor_.WriteTo(output, _repeated_outlineFactor_codec);
      if (OutlineLightingMixFactor != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(OutlineLightingMixFactor);
      }
      mainTextureLeftBottomOriginScale_.WriteTo(output, _repeated_mainTextureLeftBottomOriginScale_codec);
      mainTextureLeftBottomOriginOffset_.WriteTo(output, _repeated_mainTextureLeftBottomOriginOffset_codec);
      if (uvAnimationMaskTexture_ != null) {
        _single_uvAnimationMaskTexture_codec.WriteTagAndValue(output, UvAnimationMaskTexture);
      }
      if (UvAnimationScrollXSpeedFactor != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(UvAnimationScrollXSpeedFactor);
      }
      if (UvAnimationScrollYSpeedFactor != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(UvAnimationScrollYSpeedFactor);
      }
      if (UvAnimationRotationSpeedFactor != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(UvAnimationRotationSpeedFactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (RenderMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.RenderMode.Opaque) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RenderMode);
      }
      if (CullMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.CullMode.Off) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CullMode);
      }
      if (RenderQueueOffsetNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RenderQueueOffsetNumber);
      }
      size += litFactor_.CalculateSize(_repeated_litFactor_codec);
      if (litMultiplyTexture_ != null) {
        size += _single_litMultiplyTexture_codec.CalculateSizeWithTag(LitMultiplyTexture);
      }
      size += shadeFactor_.CalculateSize(_repeated_shadeFactor_codec);
      if (shadeMultiplyTexture_ != null) {
        size += _single_shadeMultiplyTexture_codec.CalculateSizeWithTag(ShadeMultiplyTexture);
      }
      if (CutoutThresholdFactor != 0F) {
        size += 1 + 4;
      }
      if (ShadingShiftFactor != 0F) {
        size += 1 + 4;
      }
      if (ShadingToonyFactor != 0F) {
        size += 1 + 4;
      }
      if (LightColorAttenuationFactor != 0F) {
        size += 2 + 4;
      }
      if (GiIntensityFactor != 0F) {
        size += 2 + 4;
      }
      if (normalTexture_ != null) {
        size += _single_normalTexture_codec.CalculateSizeWithTag(NormalTexture);
      }
      if (NormalScaleFactor != 0F) {
        size += 2 + 4;
      }
      size += emissionFactor_.CalculateSize(_repeated_emissionFactor_codec);
      if (emissionMultiplyTexture_ != null) {
        size += _single_emissionMultiplyTexture_codec.CalculateSizeWithTag(EmissionMultiplyTexture);
      }
      if (additiveTexture_ != null) {
        size += _single_additiveTexture_codec.CalculateSizeWithTag(AdditiveTexture);
      }
      size += rimFactor_.CalculateSize(_repeated_rimFactor_codec);
      if (rimMultiplyTexture_ != null) {
        size += _single_rimMultiplyTexture_codec.CalculateSizeWithTag(RimMultiplyTexture);
      }
      if (RimLightingMixFactor != 0F) {
        size += 2 + 4;
      }
      if (RimFresnelPowerFactor != 0F) {
        size += 2 + 4;
      }
      if (RimLiftFactor != 0F) {
        size += 2 + 4;
      }
      if (OutlineWidthMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OutlineWidthMode);
      }
      if (OutlineWidthFactor != 0F) {
        size += 2 + 4;
      }
      if (outlineWidthMultiplyTexture_ != null) {
        size += _single_outlineWidthMultiplyTexture_codec.CalculateSizeWithTag(OutlineWidthMultiplyTexture);
      }
      if (OutlineScaledMaxDistanceFactor != 0F) {
        size += 2 + 4;
      }
      if (OutlineColorMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode.FixedColor) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OutlineColorMode);
      }
      size += outlineFactor_.CalculateSize(_repeated_outlineFactor_codec);
      if (OutlineLightingMixFactor != 0F) {
        size += 2 + 4;
      }
      size += mainTextureLeftBottomOriginScale_.CalculateSize(_repeated_mainTextureLeftBottomOriginScale_codec);
      size += mainTextureLeftBottomOriginOffset_.CalculateSize(_repeated_mainTextureLeftBottomOriginOffset_codec);
      if (uvAnimationMaskTexture_ != null) {
        size += _single_uvAnimationMaskTexture_codec.CalculateSizeWithTag(UvAnimationMaskTexture);
      }
      if (UvAnimationScrollXSpeedFactor != 0F) {
        size += 2 + 4;
      }
      if (UvAnimationScrollYSpeedFactor != 0F) {
        size += 2 + 4;
      }
      if (UvAnimationRotationSpeedFactor != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VRMC_materials_mtoon other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.RenderMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.RenderMode.Opaque) {
        RenderMode = other.RenderMode;
      }
      if (other.CullMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.CullMode.Off) {
        CullMode = other.CullMode;
      }
      if (other.RenderQueueOffsetNumber != 0) {
        RenderQueueOffsetNumber = other.RenderQueueOffsetNumber;
      }
      litFactor_.Add(other.litFactor_);
      if (other.litMultiplyTexture_ != null) {
        if (litMultiplyTexture_ == null || other.LitMultiplyTexture != 0) {
          LitMultiplyTexture = other.LitMultiplyTexture;
        }
      }
      shadeFactor_.Add(other.shadeFactor_);
      if (other.shadeMultiplyTexture_ != null) {
        if (shadeMultiplyTexture_ == null || other.ShadeMultiplyTexture != 0) {
          ShadeMultiplyTexture = other.ShadeMultiplyTexture;
        }
      }
      if (other.CutoutThresholdFactor != 0F) {
        CutoutThresholdFactor = other.CutoutThresholdFactor;
      }
      if (other.ShadingShiftFactor != 0F) {
        ShadingShiftFactor = other.ShadingShiftFactor;
      }
      if (other.ShadingToonyFactor != 0F) {
        ShadingToonyFactor = other.ShadingToonyFactor;
      }
      if (other.LightColorAttenuationFactor != 0F) {
        LightColorAttenuationFactor = other.LightColorAttenuationFactor;
      }
      if (other.GiIntensityFactor != 0F) {
        GiIntensityFactor = other.GiIntensityFactor;
      }
      if (other.normalTexture_ != null) {
        if (normalTexture_ == null || other.NormalTexture != 0) {
          NormalTexture = other.NormalTexture;
        }
      }
      if (other.NormalScaleFactor != 0F) {
        NormalScaleFactor = other.NormalScaleFactor;
      }
      emissionFactor_.Add(other.emissionFactor_);
      if (other.emissionMultiplyTexture_ != null) {
        if (emissionMultiplyTexture_ == null || other.EmissionMultiplyTexture != 0) {
          EmissionMultiplyTexture = other.EmissionMultiplyTexture;
        }
      }
      if (other.additiveTexture_ != null) {
        if (additiveTexture_ == null || other.AdditiveTexture != 0) {
          AdditiveTexture = other.AdditiveTexture;
        }
      }
      rimFactor_.Add(other.rimFactor_);
      if (other.rimMultiplyTexture_ != null) {
        if (rimMultiplyTexture_ == null || other.RimMultiplyTexture != 0) {
          RimMultiplyTexture = other.RimMultiplyTexture;
        }
      }
      if (other.RimLightingMixFactor != 0F) {
        RimLightingMixFactor = other.RimLightingMixFactor;
      }
      if (other.RimFresnelPowerFactor != 0F) {
        RimFresnelPowerFactor = other.RimFresnelPowerFactor;
      }
      if (other.RimLiftFactor != 0F) {
        RimLiftFactor = other.RimLiftFactor;
      }
      if (other.OutlineWidthMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode.None) {
        OutlineWidthMode = other.OutlineWidthMode;
      }
      if (other.OutlineWidthFactor != 0F) {
        OutlineWidthFactor = other.OutlineWidthFactor;
      }
      if (other.outlineWidthMultiplyTexture_ != null) {
        if (outlineWidthMultiplyTexture_ == null || other.OutlineWidthMultiplyTexture != 0) {
          OutlineWidthMultiplyTexture = other.OutlineWidthMultiplyTexture;
        }
      }
      if (other.OutlineScaledMaxDistanceFactor != 0F) {
        OutlineScaledMaxDistanceFactor = other.OutlineScaledMaxDistanceFactor;
      }
      if (other.OutlineColorMode != global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode.FixedColor) {
        OutlineColorMode = other.OutlineColorMode;
      }
      outlineFactor_.Add(other.outlineFactor_);
      if (other.OutlineLightingMixFactor != 0F) {
        OutlineLightingMixFactor = other.OutlineLightingMixFactor;
      }
      mainTextureLeftBottomOriginScale_.Add(other.mainTextureLeftBottomOriginScale_);
      mainTextureLeftBottomOriginOffset_.Add(other.mainTextureLeftBottomOriginOffset_);
      if (other.uvAnimationMaskTexture_ != null) {
        if (uvAnimationMaskTexture_ == null || other.UvAnimationMaskTexture != 0) {
          UvAnimationMaskTexture = other.UvAnimationMaskTexture;
        }
      }
      if (other.UvAnimationScrollXSpeedFactor != 0F) {
        UvAnimationScrollXSpeedFactor = other.UvAnimationScrollXSpeedFactor;
      }
      if (other.UvAnimationScrollYSpeedFactor != 0F) {
        UvAnimationScrollYSpeedFactor = other.UvAnimationScrollYSpeedFactor;
      }
      if (other.UvAnimationRotationSpeedFactor != 0F) {
        UvAnimationRotationSpeedFactor = other.UvAnimationRotationSpeedFactor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 24: {
            RenderMode = (global::VrmProtobuf.VRMC_materials_mtoon.Types.RenderMode) input.ReadEnum();
            break;
          }
          case 32: {
            CullMode = (global::VrmProtobuf.VRMC_materials_mtoon.Types.CullMode) input.ReadEnum();
            break;
          }
          case 40: {
            RenderQueueOffsetNumber = input.ReadInt32();
            break;
          }
          case 50:
          case 53: {
            litFactor_.AddEntriesFrom(input, _repeated_litFactor_codec);
            break;
          }
          case 58: {
            int? value = _single_litMultiplyTexture_codec.Read(input);
            if (litMultiplyTexture_ == null || value != 0) {
              LitMultiplyTexture = value;
            }
            break;
          }
          case 66:
          case 69: {
            shadeFactor_.AddEntriesFrom(input, _repeated_shadeFactor_codec);
            break;
          }
          case 74: {
            int? value = _single_shadeMultiplyTexture_codec.Read(input);
            if (shadeMultiplyTexture_ == null || value != 0) {
              ShadeMultiplyTexture = value;
            }
            break;
          }
          case 85: {
            CutoutThresholdFactor = input.ReadFloat();
            break;
          }
          case 93: {
            ShadingShiftFactor = input.ReadFloat();
            break;
          }
          case 101: {
            ShadingToonyFactor = input.ReadFloat();
            break;
          }
          case 149: {
            LightColorAttenuationFactor = input.ReadFloat();
            break;
          }
          case 157: {
            GiIntensityFactor = input.ReadFloat();
            break;
          }
          case 162: {
            int? value = _single_normalTexture_codec.Read(input);
            if (normalTexture_ == null || value != 0) {
              NormalTexture = value;
            }
            break;
          }
          case 173: {
            NormalScaleFactor = input.ReadFloat();
            break;
          }
          case 178:
          case 181: {
            emissionFactor_.AddEntriesFrom(input, _repeated_emissionFactor_codec);
            break;
          }
          case 186: {
            int? value = _single_emissionMultiplyTexture_codec.Read(input);
            if (emissionMultiplyTexture_ == null || value != 0) {
              EmissionMultiplyTexture = value;
            }
            break;
          }
          case 194: {
            int? value = _single_additiveTexture_codec.Read(input);
            if (additiveTexture_ == null || value != 0) {
              AdditiveTexture = value;
            }
            break;
          }
          case 202:
          case 205: {
            rimFactor_.AddEntriesFrom(input, _repeated_rimFactor_codec);
            break;
          }
          case 210: {
            int? value = _single_rimMultiplyTexture_codec.Read(input);
            if (rimMultiplyTexture_ == null || value != 0) {
              RimMultiplyTexture = value;
            }
            break;
          }
          case 221: {
            RimLightingMixFactor = input.ReadFloat();
            break;
          }
          case 229: {
            RimFresnelPowerFactor = input.ReadFloat();
            break;
          }
          case 237: {
            RimLiftFactor = input.ReadFloat();
            break;
          }
          case 240: {
            OutlineWidthMode = (global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineWidthMode) input.ReadEnum();
            break;
          }
          case 253: {
            OutlineWidthFactor = input.ReadFloat();
            break;
          }
          case 258: {
            int? value = _single_outlineWidthMultiplyTexture_codec.Read(input);
            if (outlineWidthMultiplyTexture_ == null || value != 0) {
              OutlineWidthMultiplyTexture = value;
            }
            break;
          }
          case 269: {
            OutlineScaledMaxDistanceFactor = input.ReadFloat();
            break;
          }
          case 272: {
            OutlineColorMode = (global::VrmProtobuf.VRMC_materials_mtoon.Types.OutlineColorMode) input.ReadEnum();
            break;
          }
          case 282:
          case 285: {
            outlineFactor_.AddEntriesFrom(input, _repeated_outlineFactor_codec);
            break;
          }
          case 293: {
            OutlineLightingMixFactor = input.ReadFloat();
            break;
          }
          case 298:
          case 301: {
            mainTextureLeftBottomOriginScale_.AddEntriesFrom(input, _repeated_mainTextureLeftBottomOriginScale_codec);
            break;
          }
          case 306:
          case 309: {
            mainTextureLeftBottomOriginOffset_.AddEntriesFrom(input, _repeated_mainTextureLeftBottomOriginOffset_codec);
            break;
          }
          case 314: {
            int? value = _single_uvAnimationMaskTexture_codec.Read(input);
            if (uvAnimationMaskTexture_ == null || value != 0) {
              UvAnimationMaskTexture = value;
            }
            break;
          }
          case 325: {
            UvAnimationScrollXSpeedFactor = input.ReadFloat();
            break;
          }
          case 333: {
            UvAnimationScrollYSpeedFactor = input.ReadFloat();
            break;
          }
          case 341: {
            UvAnimationRotationSpeedFactor = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VRMC_materials_mtoon message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Rendering
      /// </summary>
      public enum RenderMode {
        [pbr::OriginalName("opaque")] Opaque = 0,
        [pbr::OriginalName("cutout")] Cutout = 1,
        [pbr::OriginalName("transparent")] Transparent = 2,
        [pbr::OriginalName("transparentWithZWrite")] TransparentWithZwrite = 3,
      }

      public enum CullMode {
        [pbr::OriginalName("off")] Off = 0,
        [pbr::OriginalName("back")] Back = 1,
      }

      /// <summary>
      /// Outline
      /// </summary>
      public enum OutlineWidthMode {
        [pbr::OriginalName("none")] None = 0,
        [pbr::OriginalName("worldCoordinates")] WorldCoordinates = 1,
        [pbr::OriginalName("screenCoordinates")] ScreenCoordinates = 2,
      }

      public enum OutlineColorMode {
        [pbr::OriginalName("fixedColor")] FixedColor = 0,
        [pbr::OriginalName("mixedLighting")] MixedLighting = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
